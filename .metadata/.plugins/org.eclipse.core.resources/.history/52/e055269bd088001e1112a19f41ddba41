package com.union.portal.controller;

import com.union.portal.common.AES;
import com.union.portal.common.APIProtectionHandler;
import com.union.portal.common.CustomerServices;
import com.union.portal.common.HttpUtils;
import com.union.portal.common.MTWebAPI;
import com.union.portal.common.MailTemplate;
import com.union.portal.common.MariaDBProcedureHandler;
import com.union.portal.common.PasswordGenerator;
import com.union.portal.controller.HomeController;
import com.union.portal.domain.Account;
import com.union.portal.domain.FundClient_client;
import com.union.portal.domain.Fundmanager_user;
import com.union.portal.domain.LastTransinfo;
import com.union.portal.domain.M2PayDepositRequest;
import com.union.portal.service.FundAdminService;
import com.union.portal.service.FundClientService;
import com.union.portal.service.MailService;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.attribute.FileTime;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.time.Instant;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.regex.Pattern;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.apache.commons.codec.binary.Base64;
import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.i18n.SessionLocaleResolver;

@Controller
@RequestMapping({ "/fundadmin/" })
public class fundAdminController {
	private static final boolean ISONESERVER = true;

	public fundAdminController(String serverinfo, FileSystemResource uploadFilePath, MailService mailService,
			SessionLocaleResolver localeResolver, MessageSource messageSource) {
		this.serverinfo = serverinfo;
		this.uploadFilePath = uploadFilePath;
		this.mailService = mailService;
		this.localeResolver = localeResolver;
		this.messageSource = messageSource;
	}

	private static final Pattern GET_NUMBER = Pattern.compile("[0-9]+");

	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);

	private static String defaultpath = "/fundadmin";

	public String serverinfo = "MT5B";

	private FileSystemResource uploadFilePath;

	private MailService mailService;

	private static final String PIZZA_IMAGES = "STPImage";

	private static final String TOMCAT_HOME_PROPERTY = "catalina.home";

	private static final String TOMCAT_HOME_PATH = System.getProperty("catalina.home");

	private static final String PIZZA_IMAGES_PATH = String.valueOf(TOMCAT_HOME_PATH) + File.separator + "STPImage";

	private static final File PIZZA_IMAGES_DIR = new File(PIZZA_IMAGES_PATH);

	private static final String PIZZA_IMAGES_DIR_ABSOLUTE_PATH = String.valueOf(PIZZA_IMAGES_DIR.getAbsolutePath())
			+ File.separator;

	private static final String FAILED_UPLOAD_MESSAGE = "You failed to upload [%s] because the file because %s";

	private static final String SUCCESS_UPLOAD_MESSAGE = "You successfully uploaded file = [%s]";

	@Autowired
	SessionLocaleResolver localeResolver;

	@Autowired
	MessageSource messageSource;
	
	@Autowired
	FundAdminService fundadminservice;
	
	@Autowired
	FundClientService fundclientservice;
	

	@RequestMapping(value = { "/i18n" }, method = { RequestMethod.GET })
	public String i18n(Locale locale, HttpServletRequest request, Model model) {
		logger.info("i18n....");
		logger.info("Welcome i18n! The client locale is {}.", locale);
		logger.info("Session locale is {}.", this.localeResolver.resolveLocale(request));
		logger.info("site.title : {}", this.messageSource.getMessage("site.title", null, "default text", locale));
		logger.info("site.count : {}",
				this.messageSource.getMessage("site.count", (Object[]) new String[] {}, "default text", locale));
		logger.info("not.exist : {}", this.messageSource.getMessage("not.exist", null, "default text", locale));
		model.addAttribute("siteCount", this.messageSource.getMessage("msg.first", null, locale));
		logger.info("Session locale is {}.", LocaleContextHolder.getLocale());
		return String.valueOf(defaultpath) + "/i18n";
	}

	@RequestMapping(value = { "/" }, method = { RequestMethod.GET })
	public String slash(Model model) {
		logger.info("Welcome home! slash.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/login";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/index" }, method = { RequestMethod.GET })
	public String index(Model model) {
		logger.info("Welcome home! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/index";
		String encryption = AES.encrypt("test");
		String decryption = AES.decrypt(encryption);
		logger.info("Encryption:" + encryption);
		logger.info("Encryption:" + decryption);
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/testpluginapi" }, method = { RequestMethod.GET })
	public String testpluginapi(Model model) {
		logger.info("Welcome testpluginapi! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/testpluginapi";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/IndexGetInfo" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView IndexGetInfo(HttpServletRequest request, Model model) {
		logger.info("Get IndexGetInfo ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/user/get?login=" + (String) session.getAttribute("s_Login");
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				responsestr.indexOf("0 Done");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/isCS" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView isCS(HttpServletRequest request, Model model) {
		logger.info("Get isCS ........" + this.serverinfo);
		HttpSession session = request.getSession();
		ModelAndView mav = new ModelAndView("jsonView");
		JSONObject job = new JSONObject();
		job.put("retcode", "0 Done");
		job.put("answer", CustomerServices.isCustomerServices((String) session.getAttribute("s_Login")));
		String responsestr = job.toString();
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/getAccountDetails" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView getAccountDetails(HttpServletRequest request, Model model) {
		logger.info("Get getAccountDetails ........" + this.serverinfo);
		String id = request.getParameter("id");
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/user/get?login=" + id;
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				responsestr.indexOf("0 Done");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/CheckAccountAndGroup" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView CheckAccountAndGroup(HttpServletRequest request, Model model) {
		// console console = new console(this);
		logger.info("Get CheckAccountAndGroup ........" + this.serverinfo);
		String id = request.getParameter("id");
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		String accountGroup = "";
		String userGroup = "";
		boolean ismatch = false;
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/user/group?login=" + id;
			try {
				responsestr = httpUtils.sendGet(path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("Get CheckAccountAndGroup info" + responsestr);
					JSONObject obj = new JSONObject(responsestr);
					String group = obj.getJSONObject("answer").getString("group");
					userGroup = group;
					// console.log(group.toString());
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/manager/get?login=" + (String) session.getAttribute("s_Login");
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("API RESULT" + responsestr);
					JSONObject jstring = new JSONObject(responsestr);
					String retcode = jstring.getString("retcode");
					JSONArray answer_array = jstring.getJSONArray("answer");
					JSONObject managerObj = answer_array.getJSONObject(0);
					JSONArray managerManagedGroup = managerObj.getJSONArray("Groups");
					JSONObject outputjson = new JSONObject();
					outputjson.put("retcode", "0 Done");
					JSONArray grouparray = new JSONArray();
					if (managerManagedGroup != null && managerManagedGroup.length() > 0)
						for (int i = 0; i < managerManagedGroup.length(); i++) {
							String group = managerManagedGroup.getJSONObject(i).getString("Group");
							logger.info("group " + i + ": " + group);
							if (group.equals(userGroup))
								ismatch = true;
						}
					// console.log(userGroup);
					outputjson.put("answer", grouparray);
					responsestr = outputjson.toString();
					logger.info("finaloutput : " + responsestr);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		JSONObject output = new JSONObject();
		output.put("retcode", "0 Done");
		output.put("answer", ismatch);
		responsestr = output.toString();
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/404" }, method = { RequestMethod.GET })
	public String Error404(Model model) {
		logger.info("Welcome Error404! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/404";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/allMaster" }, method = { RequestMethod.GET })
	public String allMaster(Model model) {
		logger.info("Welcome allMaster! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/allmaster";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/allMasterList" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView allMasterList(HttpServletRequest paramHttpServletRequest, Model paramModel)
			throws SQLException {
		throw new Error(
				"Unresolved compilation problem: \n\tThe method ApiProtection(HttpServletRequest, String, Boolean) in the type APIProtectionHandler is not applicable for the arguments (HttpServletRequest, String)\n");
	}

	@RequestMapping(value = { "/viewProfile" }, method = { RequestMethod.GET })
	public String viewProfile(HttpServletRequest request, Model model) throws SQLException {
		logger.info("Welcome viewProfile! Index.");
		String id = request.getParameter("id");
		if (id == null || id == "")
			return String.valueOf(defaultpath) + "/index";
		logger.info("Get para ........" + id);
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		model.addAttribute("profileid", id);
		ModelAndView mav = new ModelAndView("jsonView");
		JSONObject inputjson = new JSONObject();
		inputjson.put("p_name", "p_master_check_isexist");
		inputjson.put("masterid", id);
		String result = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
		if (MariaDBProcedureHandler.isJSONValid(result)) {
			JSONObject JOBJ = new JSONObject(result);
			String retcode = JOBJ.getString("retcode");
			if (retcode.indexOf("0 Done") >= 0) {
				JSONObject answer = JOBJ.getJSONObject("answer");
				if (answer != null) {
					String ismaster = answer.getString("isexists");
					logger.info("ismaster : " + ismaster);
					if (ismaster.equalsIgnoreCase("1")) {
						logger.info("in here");
						String responsestr = "";
						HttpUtils httpUtils = new HttpUtils(this.serverinfo);
						if (httpUtils.sendAuth(this.serverinfo)) {
							String path = "/api/user/get?login=" + id;
							try {
								responsestr = httpUtils.sendGet(this.serverinfo, path);
								if (responsestr.indexOf("0 Done") > 0) {
									logger.info(responsestr);
									JSONObject logindetails = new JSONObject(responsestr);
									model.addAttribute("Name",
											StringUtils.isEmpty(logindetails.getJSONObject("answer").getString("Name"))
													? "Not Set"
													: String.valueOf(
															logindetails.getJSONObject("answer").getString("Name")));
									model.addAttribute("Country", StringUtils.isEmpty(
											logindetails.getJSONObject("answer").getString("Country")) ? "Not Set"
													: String.valueOf(
															logindetails.getJSONObject("answer").getString("Country")));
									model.addAttribute("Email",
											StringUtils.isEmpty(logindetails.getJSONObject("answer").getString("Email"))
													? "Not Set"
													: String.valueOf(
															logindetails.getJSONObject("answer").getString("Email")));
									model.addAttribute("Phone",
											StringUtils.isEmpty(logindetails.getJSONObject("answer").getString("Phone"))
													? "Not Set"
													: String.valueOf(
															logindetails.getJSONObject("answer").getString("Phone")));
									model.addAttribute("Address", StringUtils.isEmpty(
											logindetails.getJSONObject("answer").getString("Address")) ? "Not Set"
													: String.valueOf(
															logindetails.getJSONObject("answer").getString("Address")));
								}
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
					} else {
						logger.info("not a master");
						String str = "/404";
						return String.valueOf(defaultpath) + str;
					}
					logger.info(result);
				}
			}
		} else {
			logger.info(result);
		}
		String returnURL = "";
		returnURL = "/viewprofile";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/checkAmIMaster" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView checkAmIMaster(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "";
		logger.info("Welcome checkAmIMaster: ");
		ModelAndView mav = new ModelAndView("jsonView");
		HttpSession session = request.getSession();
		responsestr = (String) session.getAttribute("s_Type");
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/copyMaster" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView copyMaster(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "";
		String masterid = request.getParameter("mid");
		String ratio = request.getParameter("r");
		String type = request.getParameter("t");
		logger.info("typer: " + type);
		String apiType = "";
		if (type.equalsIgnoreCase("2"))
			apiType = "L";
		if (type.equalsIgnoreCase("1"))
			apiType = "E";
		logger.info("Welcome copyMaster: ");
		ModelAndView mav = new ModelAndView("jsonView");
		HttpSession session = request.getSession();
		if (APIProtectionHandler.IsLogin(request).booleanValue()) {
			JSONObject inputjson1 = new JSONObject();
			inputjson1.put("a", "API_ADD_CLIENT");
			inputjson1.put("mid", masterid);
			inputjson1.put("cid", session.getAttribute("s_Login"));
			inputjson1.put("r", ratio);
			inputjson1.put("t", apiType);
			String encryptionjs = AES.encrypt(inputjson1.toString());
			byte[] encodedBytes = Base64.encodeBase64(encryptionjs.getBytes());
			String encodedencryptedjs = new String(encodedBytes);
			logger.info("encrypt : " + encryptionjs);
			HttpUtils httpUtils = new HttpUtils(this.serverinfo);
			String path = String.valueOf(httpUtils.DOTNETAPIURL) + "?json=" + encodedencryptedjs;
			try {
				String rresponsestr = httpUtils.sendGetExternalURL(path);
				logger.info("test api call : " + rresponsestr);
				byte[] decoded = Base64.decodeBase64(rresponsestr);
				String decodedstring = new String(decoded);
				String decryptedjs = AES.decrypt(decodedstring);
				logger.info("return str : " + rresponsestr);
				logger.info("return decoded : " + decodedstring);
				logger.info("return decrypted : " + decryptedjs);
				if (decryptedjs.indexOf("0 Done") >= 0 || decryptedjs.indexOf(" Done") >= 0) {
					JSONObject inputjson = new JSONObject();
					inputjson.put("p_name", "p_insert_copy_record");
					inputjson.put("copierid", session.getAttribute("s_Login"));
					inputjson.put("ratio", ratio);
					inputjson.put("copytype", type);
					inputjson.put("masterid", masterid);
					logger.info(inputjson.toString());
					responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
					if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
						logger.info(responsestr);
						JSONObject JOBJ = new JSONObject(responsestr);
						String retcode = JOBJ.getString("retcode");
						if (retcode.indexOf("0 Done") >= 0) {
							JSONObject answer = JOBJ.getJSONObject("answer");
							if (answer != null)
								logger.info(responsestr);
						}
					} else {
						logger.info(responsestr);
					}
				} else {
					responsestr = decryptedjs;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/getMasterFromPlugin" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView getMasterFromPlugin(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "";
		String masterid = request.getParameter("mid");
		String ratio = request.getParameter("r");
		String type = request.getParameter("t");
		logger.info("Welcome getMasterFromPlugin: ");
		ModelAndView mav = new ModelAndView("jsonView");
		HttpSession session = request.getSession();
		if (APIProtectionHandler.IsLogin(request).booleanValue()) {
			JSONObject inputjson1 = new JSONObject();
			inputjson1.put("a", "API_GET_MASTER_LIST");
			String encryptionjs = AES.encrypt(inputjson1.toString());
			byte[] encodedBytes = Base64.encodeBase64(encryptionjs.getBytes());
			String encodedencryptedjs = new String(encodedBytes);
			logger.info("encrypt : " + encryptionjs);
			HttpUtils httpUtils = new HttpUtils(this.serverinfo);
			String path = String.valueOf(httpUtils.DOTNETAPIURL) + "?json=" + encodedencryptedjs;
			try {
				String rresponsestr = httpUtils.sendGetExternalURL(path);
				logger.info("test api call : " + rresponsestr);
				byte[] decoded = Base64.decodeBase64(rresponsestr);
				String decodedstring = new String(decoded);
				String decryptedjs = AES.decrypt(decodedstring);
				logger.info("return str : " + rresponsestr);
				logger.info("return decoded : " + decodedstring);
				logger.info("return decrypted : " + decryptedjs);
				responsestr = decryptedjs;
				if (decryptedjs.indexOf("0 Done") >= 0 || decryptedjs.indexOf(" Done") >= 0) {
					logger.info(responsestr);
				} else {
					logger.info(responsestr);
					responsestr = decryptedjs;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/unCopyMaster" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView unCopyMaster(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "";
		String masterid = request.getParameter("mid");
		logger.info("Welcome unCopyMaster: ");
		ModelAndView mav = new ModelAndView("jsonView");
		HttpSession session = request.getSession();
		if (APIProtectionHandler.IsLogin(request).booleanValue()) {
			JSONObject inputjson1 = new JSONObject();
			inputjson1.put("a", "API_DEL_CLIENT");
			inputjson1.put("mid", masterid);
			inputjson1.put("cid", session.getAttribute("s_Login"));
			String encryptionjs = AES.encrypt(inputjson1.toString());
			byte[] encodedBytes = Base64.encodeBase64(encryptionjs.getBytes());
			String encodedencryptedjs = new String(encodedBytes);
			logger.info("encrypt : " + encryptionjs);
			HttpUtils httpUtils = new HttpUtils(this.serverinfo);
			String path = String.valueOf(httpUtils.DOTNETAPIURL) + "?json=" + encodedencryptedjs;
			try {
				String rresponsestr = httpUtils.sendGetExternalURL(path);
				logger.info("test api call : " + rresponsestr);
				byte[] decoded = Base64.decodeBase64(rresponsestr);
				String decodedstring = new String(decoded);
				String decryptedjs = AES.decrypt(decodedstring);
				logger.info("return str : " + rresponsestr);
				logger.info("return decoded : " + decodedstring);
				logger.info("return decrypted : " + decryptedjs);
				if (decryptedjs.indexOf("0 Done") >= 0 || decryptedjs.indexOf(" Done") >= 0) {
					JSONObject inputjson = new JSONObject();
					inputjson.put("p_name", "p_copy_deactivated_record");
					inputjson.put("copierid", session.getAttribute("s_Login"));
					inputjson.put("masterid", masterid);
					logger.info(inputjson.toString());
					responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
					if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
						logger.info(responsestr);
						JSONObject JOBJ = new JSONObject(responsestr);
						String retcode = JOBJ.getString("retcode");
						if (retcode.indexOf("0 Done") >= 0) {
							JSONObject answer = JOBJ.getJSONObject("answer");
							if (answer != null)
								logger.info(responsestr);
						}
					} else {
						logger.info(responsestr);
					}
				} else {
					responsestr = decryptedjs;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/isCopier" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView isCopier(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "";
		String masterid = request.getParameter("mid");
		logger.info("Welcome copyMaster: ");
		ModelAndView mav = new ModelAndView("jsonView");
		HttpSession session = request.getSession();
		if (APIProtectionHandler.IsLogin(request).booleanValue()) {
			JSONObject inputjson = new JSONObject();
			inputjson.put("p_name", "p_copy_check_isexist_record");
			inputjson.put("copierid", session.getAttribute("s_Login"));
			inputjson.put("masterid", masterid);
			logger.info(inputjson.toString());
			responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
			if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
				logger.info(responsestr);
				JSONObject JOBJ = new JSONObject(responsestr);
				String retcode = JOBJ.getString("retcode");
				if (retcode.indexOf("0 Done") >= 0) {
					JSONObject answer = JOBJ.getJSONObject("answer");
					if (answer != null)
						logger.info(responsestr);
				}
			} else {
				logger.info(responsestr);
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/checkCopyStatus" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView checkCopyStatus(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "";
		String masterid = request.getParameter("mid");
		logger.info("Welcome checkCopyStatus: ");
		ModelAndView mav = new ModelAndView("jsonView");
		HttpSession session = request.getSession();
		if (APIProtectionHandler.IsLogin(request).booleanValue()) {
			JSONObject inputjson = new JSONObject();
			inputjson.put("p_name", "p_client_check_master_copy_condition");
			inputjson.put("copierid", session.getAttribute("s_Login"));
			inputjson.put("masterid", masterid);
			logger.info(inputjson.toString());
			responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
			if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
				logger.info(responsestr);
				JSONObject JOBJ = new JSONObject(responsestr);
				String retcode = JOBJ.getString("retcode");
				if (retcode.indexOf("0 Done") >= 0) {
					JSONObject answer = JOBJ.getJSONObject("answer");
					if (answer != null)
						logger.info(responsestr);
				}
			} else {
				logger.info(responsestr);
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/notifications" }, method = { RequestMethod.GET })
	public String notification(Model model) {
		logger.info("Welcome notifications! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/notification";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/getNewNotification" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView getNewNotification(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "";
		String page = request.getParameter("p");
		logger.info("Welcome getNewNotification: ");
		HttpSession session = request.getSession();
		ModelAndView mav = new ModelAndView("jsonView");
		JSONObject inputjson = new JSONObject();
		inputjson.put("p_name", "p_client_fetch_notification");
		inputjson.put("client_id", session.getAttribute("s_Login"));
		inputjson.put("pagenumber", page);
		logger.info(inputjson.toString());
		responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
		if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
			logger.info(responsestr);
			JSONObject JOBJ = new JSONObject(responsestr);
			String retcode = JOBJ.getString("retcode");
			if (retcode.indexOf("0 Done") >= 0) {
				JSONObject answer = JOBJ.getJSONObject("answer");
				if (answer != null)
					logger.info(responsestr);
			}
		} else {
			logger.info(responsestr);
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/getNewNotificationCount" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView getNewNotificationCount(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "";
		logger.info("Welcome getNewNotificationCount: ");
		HttpSession session = request.getSession();
		ModelAndView mav = new ModelAndView("jsonView");
		JSONObject inputjson = new JSONObject();
		inputjson.put("p_name", "p_client_get_notification_count_total");
		inputjson.put("client_id", session.getAttribute("s_Login"));
		inputjson.put("isread", 0);
		logger.info(inputjson.toString());
		responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
		if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
			logger.info(responsestr);
			JSONObject JOBJ = new JSONObject(responsestr);
			String retcode = JOBJ.getString("retcode");
			if (retcode.indexOf("0 Done") >= 0) {
				JSONObject answer = JOBJ.getJSONObject("answer");
				if (answer != null)
					logger.info(responsestr);
			}
		} else {
			logger.info(responsestr);
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/viewNotificationDetails" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView viewNotificationDetails(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "";
		String id = request.getParameter("id");
		if (id == null || id == "")
			id = "1";
		logger.info("Get para ........" + id);
		logger.info("Welcome viewNotificationDetails: ");
		HttpSession session = request.getSession();
		ModelAndView mav = new ModelAndView("jsonView");
		JSONObject inputjson = new JSONObject();
		inputjson.put("p_name", "p_client_notification_view");
		inputjson.put("client_id", session.getAttribute("s_Login"));
		inputjson.put("id", id);
		logger.info(inputjson.toString());
		responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
		if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
			logger.info(responsestr);
			JSONObject JOBJ = new JSONObject(responsestr);
			String retcode = JOBJ.getString("retcode");
			if (retcode.indexOf("0 Done") >= 0) {
				JSONObject answer = JOBJ.getJSONObject("answer");
				if (answer != null)
					logger.info(responsestr);
			}
		} else {
			logger.info(responsestr);
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/mymaster" }, method = { RequestMethod.GET })
	public String mymaster(Model model) {
		logger.info("Welcome mymaster! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/mymaster";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/mymasterlist" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView mymasterlist(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "";
		logger.info("Welcome mymasterlist: ");
		HttpSession session = request.getSession();
		ModelAndView mav = new ModelAndView("jsonView");
		JSONObject inputjson = new JSONObject();
		inputjson.put("p_name", "p_client_get_copy_list");
		inputjson.put("client_id", session.getAttribute("s_Login"));
		inputjson.put("usertype", 2);
		logger.info(inputjson.toString());
		responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
		if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
			logger.info(responsestr);
			JSONObject JOBJ = new JSONObject(responsestr);
			String retcode = JOBJ.getString("retcode");
			if (retcode.indexOf("0 Done") >= 0) {
				JSONObject answer = JOBJ.getJSONObject("answer");
				if (answer != null)
					logger.info(responsestr);
			}
		} else {
			logger.info(responsestr);
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/mycopier" }, method = { RequestMethod.GET })
	public String mycopier(Model model) {
		logger.info("Welcome mycopier! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/mycopier";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/mycopierlist" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView mycopierlist(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "";
		logger.info("Welcome mycopierlist: ");
		HttpSession session = request.getSession();
		ModelAndView mav = new ModelAndView("jsonView");
		JSONObject inputjson = new JSONObject();
		inputjson.put("p_name", "p_copy_get_client_list");
		inputjson.put("master_id", session.getAttribute("s_Login"));
		logger.info(inputjson.toString());
		responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
		if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
			logger.info(responsestr);
			JSONObject JOBJ = new JSONObject(responsestr);
			String retcode = JOBJ.getString("retcode");
			if (retcode.indexOf("0 Done") >= 0) {
				JSONObject answer = JOBJ.getJSONObject("answer");
				if (answer != null)
					logger.info(responsestr);
			}
		} else {
			logger.info(responsestr);
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/myprofile" }, method = { RequestMethod.GET })
	public String myprofile(Model model) {
		logger.info("Welcome myprofile! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/myprofile";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/myprofileGetInfo" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView myprofileGetInfo(HttpServletRequest request, Model model) {
		logger.info("Get IndexGetInfo ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			HttpSession session = request.getSession();
			String path = "/api/user/get?login=" + (String) session.getAttribute("s_Login");
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0)
					mav.addObject("result",
							APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return mav;
	}

	@RequestMapping(value = { "/myprofileGetAccountInfo" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView myprofileGetAccountInfo(HttpServletRequest request, Model model) {
		logger.info("Get myprofileGetAccountInfo ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			HttpSession session = request.getSession();
			String path = "/api/user/account/get?login=" + (String) session.getAttribute("s_Login");
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0)
					mav.addObject("result",
							APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return mav;
	}

	@RequestMapping(value = { "/internalTransfer" }, method = { RequestMethod.GET })
	public String internalTransfer(HttpServletRequest request, Model model) {
		logger.info("Welcome home! Index.");
		String returnURL = "";
		HttpSession session = request.getSession();
		long clientid = 0L;
		String s_ClientID = (String) session.getAttribute("s_ClientID");
		List<Account> userAccountList = null;
		String retcode = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (s_ClientID != null) {
			String responsestr = "";
			if (httpUtils.sendAuth(this.serverinfo)) {
				String path = "/api/client/user/get_logins?client=" + s_ClientID;
				try {
					responsestr = httpUtils.sendGet(this.serverinfo, path);
					if (responsestr.indexOf("0 Done") > 0) {
						JSONObject jSongetLogin = new JSONObject(responsestr);
						retcode = jSongetLogin.getString("retcode");
						JSONObject login_obj = jSongetLogin.getJSONObject("answer");
						String loginstr = "";
						if (login_obj != null) {
							JSONArray jsonLogin = login_obj.getJSONArray(s_ClientID);
							if (jsonLogin != null && jsonLogin.length() > 0) {
								for (int i = 0; i < jsonLogin.length(); i++)
									loginstr = String.valueOf(loginstr) + ","
											+ (StringUtils.isEmpty(jsonLogin.get(i)) ? ""
													: String.valueOf(jsonLogin.get(i)));
								logger.info("loginstr=" + loginstr.substring(1, loginstr.length()));
							}
							loginstr = loginstr.substring(1, loginstr.length());
							userAccountList = MTWebAPI.getUserinfoByLogins(this.serverinfo, loginstr, false);
						}
						try {
							path = "/api/user/get_batch?login=" + loginstr;
							responsestr = httpUtils.sendGet(this.serverinfo, path);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		} else {
			returnURL = "/login";
		}
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("userAccountList", userAccountList);
		model.addAttribute("lang", vLocal);
		returnURL = "/internalTransfer";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/ajax/checkMarginWithServerinfo" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView checkMarginWithServerinfo(@RequestParam("login") Long login, Model model) {
		logger.info("Welcome checkMarginWithServerinfo! ........" + login + ":" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String result = "SUCCESS";
		String resultmessage = "SUCCESS";
		String marginfree = "0";
		String realmarginfree = "0";
		String balance = "0";
		String equity = "0";
		boolean isAuthIgnore = false;
		Map<String, String> resultmap = MTWebAPI.getUserTradingStatus(this.serverinfo, login, isAuthIgnore);
		if (resultmap == null || resultmap.size() <= 0) {
			result = "ERROR";
			resultmessage = "ERROR-NODATA";
		} else if (resultmap.get("Result") != null && !((String) resultmap.get("Result")).equals("SUCCESS")) {
			result = "ERROR";
			resultmessage = resultmap.get("Result");
		} else {
			result = "SUCCESS";
			resultmessage = "SUCCESS";
			realmarginfree = resultmap.get("MarginFree");
			balance = resultmap.get("Balance");
			equity = resultmap.get("Equity");
			double d_marginfree = 0.0D;
			double d_balance = 0.0D;
			double d_equity = 0.0D;
			try {
				d_balance = Double.parseDouble(balance);
			} catch (Exception exception) {
			}
			try {
				d_equity = Double.parseDouble(equity);
			} catch (Exception exception) {
			}
			if (d_balance == d_equity) {
				d_marginfree = d_equity;
			} else if (d_equity <= 0.0D) {
				d_marginfree = 0.0D;
			} else {
				d_marginfree = d_equity * 0.8D;
			}
			DecimalFormat form = new DecimalFormat("#.##");
			marginfree = form.format(d_marginfree);
		}
		logger.info("#### MarginFree result  ........" + marginfree + ":" + realmarginfree);
		mav.addObject("result", result);
		mav.addObject("resultmessage", resultmessage);
		mav.addObject("MarginFree", marginfree);
		mav.addObject("RealMarginFree", realmarginfree);
		mav.addObject("Balance", balance);
		mav.addObject("Equity", equity);
		return mav;
	}

	@RequestMapping(value = { "/Orders" }, method = { RequestMethod.GET })
	public String Orders(Model model) {
		logger.info("Welcome home! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/orders";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/OrderGetTotal" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView OrderGetTotal(HttpServletRequest request, Model model) {
		logger.info("Get OrderGetTotal ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			HttpSession session = request.getSession();
			String path = "/api/order/get_total?login=" + (String) session.getAttribute("s_Login");
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				responsestr.indexOf("0 Done");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/OrderGetList" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView OrderGetList(HttpServletRequest request, Model model) {
		logger.info("Get OrderGetList ........" + this.serverinfo);
		String page = request.getParameter("page");
		if (page == null || page == "")
			page = "1";
		logger.info("Get para ........" + page);
		int rowNumberPerPage = 5;
		int offset = rowNumberPerPage * (Integer.parseInt(page) - 1);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			HttpSession session = request.getSession();
			String path = "/api/order/get_page?login=" + (String) session.getAttribute("s_Login") + "&offset="
					+ String.valueOf(offset) + "&total=" + String.valueOf(rowNumberPerPage);
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("API RESULT" + responsestr);
					mav.addObject("result",
							APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return mav;
	}
	
	
	@RequestMapping(value = { "/ApplicationList" }, method = { RequestMethod.GET })
	public String ApplicationList(Model model) {
		logger.info("Welcome mastersetting! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/applicationlist";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/mastersetting" }, method = { RequestMethod.GET })
	public String masterlist(Model model) {
		logger.info("Welcome mastersetting! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/mastersettings";
		return String.valueOf(defaultpath) + returnURL;
	}
	

	@RequestMapping(value = { "/AddMasterManager" }, method = { RequestMethod.GET })
	public String AddMasterManager(Model model) {
		logger.info("Welcome AddMasterManager! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/addmastermanager";
		return String.valueOf(defaultpath) + returnURL;
	}
	
	

	@RequestMapping(value = { "/AccountList" }, method = { RequestMethod.GET })
	public String AccountList(Model model) {
		logger.info("Welcome AccountList! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/accountlist";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/CreateAccount" }, method = { RequestMethod.GET })
	public String CreateAccount(Model model) {
		logger.info("Welcome AccountList! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/createaccount";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/EditAccount" }, method = { RequestMethod.GET })
	public String EditAccount(Model model) {
		logger.info("Welcome AccountList! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/editaccount";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/Deposit" }, method = { RequestMethod.GET })
	public String Deposit(Model model) {
		logger.info("Welcome AccountList! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/deposit";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/FundDeposit" }, method = { RequestMethod.GET })
	public String FundDeposit(Model model) {
		logger.info("Welcome FundDeposit! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/funddeposit";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/FundWithdrawal" }, method = { RequestMethod.GET })
	public String FundWithdrawal(Model model) {
		logger.info("Welcome FundWithdrawal! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/fundwithdrawal";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/Withdrawal" }, method = { RequestMethod.GET })
	public String Withdrawal(Model model) {
		logger.info("Welcome Withdrawal! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/withdrawal";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/newWithdrawalRequest" }, method = { RequestMethod.GET })
	public String newWithdrawalRequest(Model model) {
		logger.info("Welcome newWithdrawalRequest! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/newwithdrawalrequest";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/Transfer" }, method = { RequestMethod.GET })
	public String Transfer(Model model) {
		logger.info("Welcome Withdrawal! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/transfer";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = "/GetNewApplication", method = RequestMethod.GET, produces = "application/json;charset=UTF-8")
	@ResponseBody
	public ModelAndView GetNewApplication(HttpServletRequest request, Model model) {

		logger.info("Get GetNewApplication ........" + serverinfo);

		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";

		HttpUtils httpUtils = new HttpUtils(serverinfo);
		JSONArray list = new JSONArray();
		if (httpUtils.sendAuth(serverinfo)) {
			HttpSession session = request.getSession();

			String group = httpUtils.getSwapGroupRegisteration(serverinfo);
			String path = "/api/client/get?group=" + group;

			/**/

			try {
				responsestr = httpUtils.sendGet(serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("API RESULT" + responsestr);

					JSONObject outputobject = new JSONObject(responsestr);

					for (int i = 0, len = outputobject.getJSONArray("answer").length(); i < len; i++) {
						JSONObject obj = outputobject.getJSONArray("answer").getJSONObject(i);

						if (obj.getInt("ClientStatus") == 400) {
							list.put(obj);
						}

					}

					outputobject.remove("answer");
					outputobject.put("answer", list);
					responsestr = outputobject.toString();
					logger.info("Get GetNewApplication response string" + responsestr);

				}

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(false)));
		return mav;
	}

	@RequestMapping(value = "/GetNewApplicantDoc", method = RequestMethod.GET, produces = "application/json;charset=UTF-8")
	@ResponseBody
	public ModelAndView GetNewApplicantDoc(HttpServletRequest request, Model model) {
		boolean nodocument = false;
		String id = request.getParameter("id");

		if (id == null || id == "") {
			id = "0";
		}
		logger.info("Get para ........" + id);
		logger.info("Get GetNewApplicantDoc ........" + serverinfo);
		String idsParameter = "";
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";

		HttpUtils httpUtils = new HttpUtils(serverinfo);

		if (httpUtils.sendAuth(serverinfo)) {

			HttpSession session = request.getSession();
			String path = "/api/document/get?client=" + id;
			try {
				responsestr = httpUtils.sendGet(serverinfo, path);
				logger.info("Get GetNewApplicantDoc rpstr" + responsestr);
				if (responsestr.indexOf("0 Done") > 0) {

					JSONObject json_obj = new JSONObject(responsestr);

					JSONArray ids_obj = json_obj.getJSONArray("answer");
					if (ids_obj != null && ids_obj.length() > 0) {

						for (int i = 0; i < ids_obj.length(); i++) {
							JSONArray Documentjson = ids_obj.getJSONObject(i).getJSONArray("DocumentFiles");

							// JSONArray Documentjson = new JSONArray(ids_DocumentFiles);
							if (Documentjson.length() > 0) {
								String docID = Documentjson.getJSONObject(0).getString("ID");

								if (i == 0) {
									idsParameter = docID;
								} else {
									idsParameter = idsParameter + "," + docID;
								}
							} else {
								nodocument = true;
							}

						}

						logger.info("IDS :" + idsParameter);

						httpUtils = new HttpUtils(serverinfo);

						if (httpUtils.sendAuth(serverinfo)) {

							path = "/api/attachment/get?id=" + idsParameter;
							try {
								responsestr = httpUtils.sendGet(serverinfo, path);
								if (responsestr.indexOf("0 Done") > 0) {

								}

							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}

					}
				}

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		if (nodocument) {
			JSONObject outputanswer = new JSONObject();
			outputanswer.put("retcode", "1 Error");
			outputanswer.put("answer", "no upload document found.");

			responsestr = outputanswer.toString();

		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(false)));
		return mav;
	}

	@RequestMapping(value = "/ConfirmNewApplicant", method = RequestMethod.GET, produces = "application/json;charset=UTF-8")
	@ResponseBody
	public ModelAndView ConfirmNewApplicant(HttpServletRequest request, Model model) {

		logger.info("Get ConfirmNewApplicant ........" + serverinfo);

		String id = request.getParameter("id");
		if (id == null || id == "") {
			id = "0";
		}
		logger.info("Get para ........" + id);
		String name = request.getParameter("name");
		String email = request.getParameter("email");
		String managerID = request.getParameter("mid");

		logger.info("Get para ........" + name);

		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";

		HttpUtils httpUtils = new HttpUtils(serverinfo);
		if (id != null && id != "" && name != null && name != "")

		{
			if (httpUtils.sendAuth(serverinfo)) {

				//String passmain = PasswordGenerator.generate(10);
				String passinvestor = PasswordGenerator.generate(10);
				// String name = "MINGFUNG API TEST";
				String group = httpUtils.getSwapGroupRegisteration(serverinfo);
				String leverage = "100";
				JSONObject midjson = new JSONObject();
				midjson.put("manager_id", managerID);
				Fundmanager_user fmu = fundadminservice.getUserInfoBymanagerlogin(managerID);
				FundClient_client fcc =  fundclientservice.getClientDetailsbyClientID( id);
				
				//String agent = "";

			

							
							JSONObject password = new JSONObject();
							password.put("PassMain", fcc.getPassword());
							password.put("PassInvestor", passinvestor);
							password.put("Agent", fmu.getAgentaccount());
							password.put("Comment", "created in Fund manager by " + managerID);
							password.put("Company", fmu.getCompanyname());
							password.put("Phone", fcc.getPhone());
							password.put("Country", fcc.getCountry());
							password.put("City", fcc.getCity());
							password.put("ZIPCode", fcc.getPostcode());
							password.put("Address", fcc.getAddress());
							password.put("Email", fcc.getEmail());
							
							
						String	path = "/api/user/add?group="+ group + "&name=" + name + "&leverage=" + fmu.getLeverage() ;

							logger.info("trading account url" + path);
							try {
								responsestr = httpUtils.sendPost(this.serverinfo, path, password.toString());
								if (responsestr.indexOf("0 Done") > 0) {

									JSONObject jobject = new JSONObject(responsestr);

									JSONObject janswer = jobject.getJSONObject("answer");
									String TradingAccLogin = janswer.getString("Login");

									// bind client to trading account

									logger.info("CLIENTID AND ACCOUNT LOGIN : " + id + ":" + TradingAccLogin
											+ ", password" + fmu.getPassword());

									if (httpUtils.sendAuth(serverinfo)) {

										path = "/api/client/user/add?client=" + id + "&user=" + TradingAccLogin;
										try {
											responsestr = httpUtils.sendGet(serverinfo, path);
											if (responsestr.indexOf("0 Done") > 0) {

												JSONObject outputanswer = new JSONObject();
												outputanswer.put("RecordID", id);
												outputanswer.put("ClientStatus", 700);

												JSONArray outarray = new JSONArray();
												outarray.put(outputanswer);

												logger.info("send Auth" + outputanswer.toString());
												httpUtils = new HttpUtils(serverinfo);

												if (httpUtils.sendAuth(serverinfo)) {
													path = "/api/client/update";
													try {
														responsestr = httpUtils.sendPost(serverinfo, path,
																outarray.toString());
														String adminseq ="1";
														fundadminservice.UpdateTradingAccountLoginId(TradingAccLogin, id ,adminseq);

														System.out.println("#### response" + responsestr);

														logger.info("mailtest1 service rrwr@naver.com.......");
														try {

															String sendemail = "accounts@unionmks.com";
															String sendname = "UnionMK Account Registration";
															String recevieemail = email;
															String sedemailpw = "dbsldhs!23";
															logger.info("mailtest2................. ");

															JavaMailSenderImpl sender = new JavaMailSenderImpl();
															sender.setHost("mail.unionmks.com");
															sender.setPort(369);
															sender.setUsername(sendemail);
															sender.setPassword(sedemailpw);
															logger.info("mailtest3................. ");

															Properties prop = new Properties();
															prop.setProperty("mail.smtp.auth", "true");
															prop.setProperty("mail.smtp.starttls.enable", "true");
															logger.info("mailtest4................. ");

															sender.setJavaMailProperties(prop);
															MimeMessage message = sender.createMimeMessage();
															MimeMessageHelper helper = new MimeMessageHelper(message);
															helper.setTo(recevieemail);
															helper.setFrom(sendemail, sendname);
															helper.setSubject("Your Account have been approved");

															String body = MailTemplate.getAccountCreate("1",
																	Long.parseLong(TradingAccLogin), "Your Password",
																	passinvestor,  request.getServerName()+"/portal/fundclient/login", "1");
															helper.setText(body, true);
															// helper.setText(body);
															sender.send(message);
															logger.info("mailtest5................. ");

														} catch (Exception e) {
															e.printStackTrace();
														}

													} catch (Exception e) {
														// TODO Auto-generated catch block
														e.printStackTrace();
													}
												}
											}

										} catch (Exception e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
									}

								}

							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}

						}
					

				}
			
		
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(false)));
		return mav;
	}

	@RequestMapping(value = { "/PositionGet100" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView PositionGet100(HttpServletRequest request, Model model) {
		logger.info("Get PositionGet100Page ........" + this.serverinfo);
		String page = request.getParameter("page");
		if (page == null || page == "")
			page = "1";
		logger.info("Get para ........" + page);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			HttpSession session = request.getSession();
			String path = "/api/position/get_page?login=" + (String) session.getAttribute("s_Login")
					+ "&offset=0&total=100";
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("API RESULT" + responsestr);
					double lot = 0.0D;
					double profit = 0.0D;
					double swap = 0.0D;
					JSONObject outputobject = new JSONObject(responsestr);
					for (int i = 0, len = outputobject.getJSONArray("answer").length(); i < len; i++) {
						JSONObject obj = outputobject.getJSONArray("answer").getJSONObject(i);
						lot += obj.getDouble("Volume");
						profit += obj.getDouble("Profit");
						swap += obj.getDouble("Storage");
					}
					lot /= 10000.0D;
					logger.info("output" + lot + profit + swap);
					JSONObject outputanswer = new JSONObject();
					outputanswer.put("lot", lot);
					outputanswer.put("profit", profit);
					outputanswer.put("swap", swap);
					JSONObject inputjson = new JSONObject();
					inputjson.put("retcode", "0 Done");
					inputjson.put("answer", outputanswer);
					responsestr = inputjson.toString();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/History" }, method = { RequestMethod.GET })
	public String History(Model model) {
		logger.info("Welcome History! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/history";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/newtopic" }, method = { RequestMethod.GET })
	public String newtopic(Model model) {
		logger.info("Welcome newtopic! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/newTopic";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/CSnew" }, method = { RequestMethod.GET })
	public String CSnew(Model model) {
		logger.info("Welcome CSnew! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/CSnew";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/CSall" }, method = { RequestMethod.GET })
	public String CSall(Model model) {
		logger.info("Welcome CSall! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/CSall";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/viewtopic" }, method = { RequestMethod.GET })
	public String viewtopic(Model model) {
		logger.info("Welcome viewtopic! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/viewtopic";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/viewWithdrawalRequest" }, method = { RequestMethod.GET })
	public String viewWithdrawalRequest(Model model) {
		logger.info("Welcome viewWithdrawalRequest! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/viewwithdrawalrequest";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/viewCustomerTopicComment" }, method = { RequestMethod.GET })
	public String viewCustomerTopicComment(Model model) {
		logger.info("Welcome viewCustomerTopicComment! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/viewcustomertopiccomment";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/topics" }, method = { RequestMethod.GET })
	public String topics(Model model) {
		logger.info("Welcome History! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/topics";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/viewCustomerTopic" }, method = { RequestMethod.GET })
	public String viewCustomerTopic(Model model) {
		logger.info("Welcome viewCustomerTopic! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/viewCustomerTopic";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/fundHistory" }, method = { RequestMethod.GET })
	public String fundHistory(Model model) {
		logger.info("Welcome History! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/fundhistory";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/SwapCalculator" }, method = { RequestMethod.GET })
	public String SwapCalculator(Model model) {
		logger.info("Welcome SwapCalculator! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/swapCalculator";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/SwapTrading" }, method = { RequestMethod.GET })
	public String SwapTrading(Model model) {
		logger.info("Welcome SwapTrading! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/swapTrading";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/dailyreport" }, method = { RequestMethod.GET })
	public String dailyreport(Model model) {
		logger.info("Welcome dailyreport! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/dailyreport";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/HistoryGetTotal" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView HistoryGetTotal(HttpServletRequest request, Model model) {
		logger.info("Get HistoryGetTotal ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			long unixtimenow = System.currentTimeMillis() / 1000L;
			long unixtime1yearbefore = unixtimenow - 31536000L;
			HttpSession session = request.getSession();
			String path = "/api/deal/get_total?login=" + (String) session.getAttribute("s_Login") + "&from="
					+ unixtime1yearbefore + "to=" + unixtimenow;
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				responsestr.indexOf("0 Done");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/executebatchorder" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView executebatchorder(HttpServletRequest request, Model model) {
		logger.info("Get executebatchorder ........" + this.serverinfo);
		String body = request.getParameter("body");
		logger.info("body = " + body);
		ModelAndView mav = new ModelAndView("jsonView");
		byte[] decoded = Base64.decodeBase64(body);
		String decodedstring = new String(decoded);
		String responsestr = decodedstring;
		JSONArray jarray = new JSONArray(decodedstring);
		jarray.length();
		responsestr = jarray.getJSONObject(0).getString("symbol");
		responsestr = "";
		HttpSession session = request.getSession();
		int numberofsuccess = 0;
		for (int i = 0; i < jarray.length(); i++) {
			String symbol = jarray.getJSONObject(i).getString("symbol");
			String type = jarray.getJSONObject(i).getString("type");
			Double lot = Double.valueOf(jarray.getJSONObject(i).getDouble("lot"));
			lot = Double.valueOf(lot.doubleValue() * 10000.0D);
			int inttype = 0;
			if (type.indexOf("buy") >= 0) {
				inttype = 0;
			} else {
				inttype = 1;
			}
			JSONObject outputanswer = new JSONObject();
			outputanswer.put("Action", 200);
			outputanswer.put("SourceLogin", 3002);
			outputanswer.put("Login", session.getAttribute("s_Login"));
			outputanswer.put("Symbol", symbol);
			outputanswer.put("Volume", lot);
			outputanswer.put("PriceOrder", "");
			outputanswer.put("Type", inttype);
			outputanswer.put("TypeFill", 0);
			logger.info("send Auth" + outputanswer.toString());
			HttpUtils httpUtils = new HttpUtils(this.serverinfo);
			if (httpUtils.sendAuth(this.serverinfo)) {
				String path = "/api/dealer/send_request";
				try {
					responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
					if (responsestr.indexOf("0 Done") >= 0)
						numberofsuccess++;
					System.out.println("#### response no: " + i + " = " + responsestr);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		JSONObject outanswer = new JSONObject();
		if (numberofsuccess == jarray.length()) {
			outanswer.put("retcode", "0 Done");
			outanswer.put("NOS", numberofsuccess);
		} else {
			outanswer.put("retcode", "1 ERROR");
			outanswer.put("NOS", numberofsuccess);
		}
		responsestr = outanswer.toString();
		System.out.println("OUT JSON: " + responsestr);
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/closePosition" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView closePosition(HttpServletRequest request, Model model) {
		logger.info("Get executebatchorder ........" + this.serverinfo);
		int pid = Integer.parseInt(request.getParameter("pid"));
		String symbol = request.getParameter("symbol");
		Double lot = Double.valueOf(Double.parseDouble(request.getParameter("lot")));
		String type = request.getParameter("type");
		lot = Double.valueOf(lot.doubleValue() * 10000.0D);
		int inttype = 0;
		if (type.indexOf("BUY") >= 0) {
			inttype = 1;
		} else {
			inttype = 0;
		}
		logger.info("Pid = " + pid);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpSession session = request.getSession();
		JSONObject outputanswer = new JSONObject();
		outputanswer.put("Action", 200);
		outputanswer.put("SourceLogin", 3002);
		outputanswer.put("Login", 4449);
		outputanswer.put("Symbol", symbol);
		outputanswer.put("Volume", lot);
		outputanswer.put("PriceOrder", "");
		outputanswer.put("Type", inttype);
		outputanswer.put("Position", pid);
		outputanswer.put("TypeFill", 0);
		logger.info("send Auth" + outputanswer.toString());
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/dealer/send_request";
			try {
				responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
				System.out.println("#### response" + responsestr);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/signupConfirm" }, consumes = { "application/json" }, produces = { "application/json" })
	public ModelAndView signupConfirm(@RequestBody String body, HttpServletRequest request) throws SQLException {
		JSONObject jsonbodyobj = new JSONObject(body);
		String PersonName = jsonbodyobj.getString("PersonName");
		long PersonBirthDate = jsonbodyobj.getLong("PersonBirthDate");
		String PersonGender = jsonbodyobj.getString("PersonGender");
		String ContactEmail = jsonbodyobj.getString("ContactEmail");
		String ContactPhone = jsonbodyobj.getString("ContactPhone");
		String AddressCountry = jsonbodyobj.getString("AddressCountry");
		String AddressPostcode = jsonbodyobj.getString("AddressPostcode");
		String AddressStreet = jsonbodyobj.getString("AddressStreet");
		String AddressState = jsonbodyobj.getString("AddressState");
		String AddressCity = jsonbodyobj.getString("AddressCity");
		String base64ID = jsonbodyobj.getString("base64ID");
		String base64POA = jsonbodyobj.getString("base64POA");
		logger.info("Get executebatchorder ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpSession session = request.getSession();
		FileTime fileTime = FileTime.fromMillis(PersonBirthDate);
		JSONObject outputanswer = new JSONObject();
		outputanswer.put("PersonName", PersonName);
		outputanswer.put("PersonBirthDate", fileTime);
		outputanswer.put("PersonGender", PersonGender);
		outputanswer.put("ContactEmail", ContactEmail);
		outputanswer.put("ContactPhone", ContactPhone);
		outputanswer.put("AddressCountry", AddressCountry);
		outputanswer.put("AddressPostcode", AddressPostcode);
		outputanswer.put("AddressStreet", AddressStreet);
		outputanswer.put("AddressState", AddressState);
		outputanswer.put("AddressCity", AddressCity);
		outputanswer.put("ClientStatus", 400);
		outputanswer.put("Comment", "Create By Swap System");
		JSONArray outarray = new JSONArray();
		outarray.put(outputanswer);
		logger.info("send Auth" + outputanswer.toString());
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/client/add";
			try {
				responsestr = httpUtils.sendPost(this.serverinfo, path, outarray.toString());
				System.out.println("#### response" + responsestr);
				String str_clientid = "";
				long clientid = 0L;
				if (responsestr.indexOf("0 Done") >= 0) {
					JSONObject json_obj = new JSONObject(responsestr);
					String retcode = json_obj.getString("retcode");
					logger.info(retcode);
					if (retcode.equals("0 Done")) {
						JSONArray ids_obj = json_obj.getJSONArray("answer");
						if (ids_obj != null && ids_obj.length() > 0) {
							String ids_retcode = ids_obj.getJSONObject(0).getString("retcode");
							if (ids_retcode.equals("0 Done")) {
								str_clientid = String.valueOf(ids_obj.getJSONObject(0).get("id"));
								logger.info("send client ID" + str_clientid);
								outputanswer = new JSONObject();
								outputanswer.put("RelatedClient", str_clientid);
								outputanswer.put("DocumentType", 1);
								outputanswer.put("DocumentSubtype", 1);
								outputanswer.put("DocumentName", "ID");
								outputanswer.put("DocumentComment", "Swap Trading register document");
								JSONArray documentfiles = new JSONArray();
								JSONObject fileObject = new JSONObject();
								fileObject.put("CreatedBy", 3002);
								fileObject.put("Flags", 5);
								fileObject.put("Name", "ID");
								documentfiles.put(fileObject);
								outputanswer.put("DocumentFiles", documentfiles);
								outarray = new JSONArray();
								outarray.put(outputanswer);
								outputanswer = new JSONObject();
								outputanswer.put("RelatedClient", str_clientid);
								outputanswer.put("DocumentType", 2);
								outputanswer.put("DocumentSubtype", 2);
								outputanswer.put("DocumentName", "POA");
								outputanswer.put("DocumentComment", "Swap Trading register document");
								documentfiles = new JSONArray();
								fileObject = new JSONObject();
								fileObject.put("CreatedBy", 3002);
								fileObject.put("Flags", 5);
								fileObject.put("Name", "POA");
								documentfiles.put(fileObject);
								outputanswer.put("DocumentFiles", documentfiles);
								outarray.put(outputanswer);
								logger.info("send Auth" + outputanswer.toString());
								httpUtils = new HttpUtils(this.serverinfo);
								if (httpUtils.sendAuth(this.serverinfo)) {
									path = "/api/document/add";
									try {
										responsestr = httpUtils.sendPost(this.serverinfo, path, outarray.toString());
										String str_documentID1 = "";
										String str_documentID2 = "";
										System.out.println("#### response" + responsestr);
										logger.info("### response from document add : " + responsestr);
										json_obj = new JSONObject(responsestr);
										ids_obj = json_obj.getJSONArray("answer");
										if (ids_obj != null && ids_obj.length() > 0) {
											ids_retcode = ids_obj.getJSONObject(0).getString("retcode");
											if (ids_retcode.equals("0 Done")) {
												str_documentID1 = String.valueOf(ids_obj.getJSONObject(0).get("id"));
												outputanswer = new JSONObject();
												outputanswer.put("RecordID", 47);
												outputanswer.put("RelatedClient", str_clientid);
												outputanswer.put("FileType", 5);
												outputanswer.put("FileName", "ID.jpg");
												outputanswer.put("FileContent", base64ID);
												outarray = new JSONArray();
												outarray.put(outputanswer);
												str_documentID2 = String.valueOf(ids_obj.getJSONObject(1).get("id"));
												outputanswer = new JSONObject();
												outputanswer.put("RecordID", 47);
												outputanswer.put("RelatedClient", str_clientid);
												outputanswer.put("FileType", 5);
												outputanswer.put("FileName", "POA.jpg");
												outputanswer.put("FileContent", base64POA);
												outarray.put(outputanswer);
												logger.info("send Auth" + outputanswer.toString());
												httpUtils = new HttpUtils(this.serverinfo);
												if (httpUtils.sendAuth(this.serverinfo)) {
													path = "/api/attachment/add";
													try {
														responsestr = httpUtils.sendPost(this.serverinfo, path,
																outarray.toString());
														logger.info(
																"### response from attachment add : " + responsestr);
														System.out.println("#### response" + responsestr);
														String str_attachmentID1 = "";
														String str_attachmentID2 = "";
														System.out.println("#### response" + responsestr);
														json_obj = new JSONObject(responsestr);
														ids_obj = json_obj.getJSONArray("answer");
														if (ids_obj != null && ids_obj.length() > 0) {
															ids_retcode = ids_obj.getJSONObject(0).getString("retcode");
															if (ids_retcode.equals("0 Done")) {
																str_attachmentID1 = String
																		.valueOf(ids_obj.getJSONObject(0).get("id"));
																str_attachmentID2 = String
																		.valueOf(ids_obj.getJSONObject(1).get("id"));
																if (httpUtils.sendAuth(this.serverinfo)) {
																	session = request.getSession();
																	path = "/api/attachment/attach?id="
																			+ str_attachmentID1
																			+ "&entity=document&entity_id="
																			+ str_documentID1 + "&action=attach";
																	logger.info("### path1 from binding : " + path);
																	try {
																		responsestr = httpUtils.sendGet(this.serverinfo,
																				path);
																		logger.info("### response from binding : "
																				+ responsestr);
																		if (responsestr.indexOf("0 Done") > 0
																				&& httpUtils
																						.sendAuth(this.serverinfo)) {
																			session = request.getSession();
																			path = "/api/attachment/attach?id="
																					+ str_attachmentID2
																					+ "&entity=document&entity_id="
																					+ str_documentID2
																					+ "&action=attach";
																			logger.info("### response from binding : "
																					+ responsestr);
																			try {
																				responsestr = httpUtils
																						.sendGet(this.serverinfo, path);
																				logger.info("### path2 from binding : "
																						+ path);
																				responsestr.indexOf("0 Done");
																			} catch (Exception e) {
																				e.printStackTrace();
																			}
																		}
																	} catch (Exception e) {
																		e.printStackTrace();
																	}
																}
															}
														}
													} catch (Exception e) {
														e.printStackTrace();
													}
												}
											}
										}
									} catch (Exception e) {
										e.printStackTrace();
									}
								}
							} else {
								logger.info("### ids_retcode : " + ids_retcode);
							}
						}
					}
					logger.info("### str_clientid : " + str_clientid);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", responsestr);
		return mav;
	}

	@RequestMapping(value = { "/uploaddocument" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView uploaddocument(HttpServletRequest request, Model model) {
		logger.info("Get executebatchorder ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpSession session = request.getSession();
		JSONObject outputanswer = new JSONObject();
		outputanswer.put("RelatedClient", 1357);
		outputanswer.put("DocumentType", 1);
		outputanswer.put("DocumentSubtype", 1);
		outputanswer.put("DocumentName", "ID MINGFUNG");
		outputanswer.put("DocumentComment", "Swap Trading register document");
		JSONArray documentfiles = new JSONArray();
		JSONObject fileObject = new JSONObject();
		fileObject.put("CreatedBy", 3002);
		fileObject.put("Flags", 5);
		fileObject.put("Name", "IDMINGFUNG.PNG");
		documentfiles.put(fileObject);
		outputanswer.put("DocumentFiles", documentfiles);
		JSONArray outarray = new JSONArray();
		outarray.put(outputanswer);
		logger.info("send Auth" + outputanswer.toString());
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/document/add";
			try {
				responsestr = httpUtils.sendPost(this.serverinfo, path, outarray.toString());
				System.out.println("#### response" + responsestr);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", responsestr);
		return mav;
	}

	@RequestMapping(value = { "/uploadattachment" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView uploadattachment(HttpServletRequest request, Model model) {
		logger.info("Get uploadattachment ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpSession session = request.getSession();
		JSONObject outputanswer = new JSONObject();
		outputanswer.put("RecordID", 47);
		outputanswer.put("RelatedClient", 1357);
		outputanswer.put("FileType", 5);
		outputanswer.put("FileName", "IDMINGFUNG.png");
		outputanswer.put("FileContent",
				"");
		JSONArray outarray = new JSONArray();
		outarray.put(outputanswer);
		logger.info("send Auth" + outputanswer.toString());
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/attachment/add";
			try {
				responsestr = httpUtils.sendPost(this.serverinfo, path, outarray.toString());
				System.out.println("#### response" + responsestr);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", responsestr);
		return mav;
	}

	@RequestMapping(value = { "/documentbindattachment" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView documentbindattachment(HttpServletRequest request, Model model) {
		logger.info("Get OrderGetTotal ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			HttpSession session = request.getSession();
			String path = "/api/attachment/attach?id=55&entity=document&entity_id=47&action=attach";
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				responsestr.indexOf("0 Done");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", responsestr);
		return mav;
	}

	@RequestMapping(value = { "/GetTotalTradebyclient" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView HistoryGetTotalbyclient(HttpServletRequest request, Model model) {
		int historytotal = 0;
		int positiontotal = 0;
		logger.info("Get HistoryGetTotalbyclient ........" + this.serverinfo);
		String mid = request.getParameter("mid");
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			long unixtimenow = System.currentTimeMillis() / 1000L;
			long unixtime1yearbefore = unixtimenow - 31536000L;
			HttpSession session = request.getSession();
			String path = "/api/history/get_total?login=" + mid + "&from=" + unixtime1yearbefore + "to=" + unixtimenow;
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					JSONObject JOBJ = new JSONObject(responsestr);
					String retcode = JOBJ.getString("retcode");
					if (retcode.indexOf("0 Done") >= 0) {
						JSONObject answer = JOBJ.getJSONObject("answer");
						if (answer != null) {
							String total = answer.getString("total");
							historytotal = Integer.parseInt(total);
							logger.info("totalhistory, " + historytotal);
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (httpUtils.sendAuth(this.serverinfo)) {
			HttpSession session = request.getSession();
			String path = "/api/position/get_total?login=" + (String) session.getAttribute("s_Login");
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info(responsestr);
					JSONObject JOBJ = new JSONObject(responsestr);
					String retcode = JOBJ.getString("retcode");
					if (retcode.indexOf("0 Done") >= 0) {
						JSONObject answer = JOBJ.getJSONObject("answer");
						if (answer != null) {
							String total = answer.getString("total");
							positiontotal = Integer.parseInt(total);
							logger.info("positiontotal, " + positiontotal);
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		JSONObject inputjson = new JSONObject();
		JSONObject outputanswer = new JSONObject();
		outputanswer.put("total", positiontotal + historytotal);
		inputjson.put("retcode", "0 Done");
		inputjson.put("answer", outputanswer);
		logger.info("total trade, " + inputjson.toString());
		responsestr = inputjson.toString();
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/HistoryGetList" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView HistoryGetList(HttpServletRequest request, Model model) {
		logger.info("Get HistoryGetList ........" + this.serverinfo);
		String page = request.getParameter("page");
		if (page == null || page == "")
			page = "1";
		logger.info("Get para ........" + page);
		int rowNumberPerPage = 5;
		int offset = rowNumberPerPage * (Integer.parseInt(page) - 1);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			HttpSession session = request.getSession();
			long unixtimenow = System.currentTimeMillis() / 1000L;
			long unixtime1yearbefore = unixtimenow - 31536000L;
			unixtimenow += 31536000L;
			String path = "/api/deal/get_page?login=" + (String) session.getAttribute("s_Login") + "&from="
					+ unixtime1yearbefore + "&to=" + unixtimenow + "&offset=" + String.valueOf(offset) + "&total="
					+ String.valueOf(rowNumberPerPage);
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0)
					logger.info("API RESULT" + responsestr);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/getSwapGroup" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView getGroup(HttpServletRequest request, Model model) {
		logger.info("Get getGroup ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			HttpSession session = request.getSession();
			String path = "/api/symbol/list ";
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("API RESULT" + responsestr);
					JSONObject outputobject = new JSONObject(responsestr);
					JSONObject outputanswer = new JSONObject();
					outputanswer.put("retcode", "0 Done");
					JSONArray jarray = new JSONArray();
					for (int i = 0, len = outputobject.getJSONArray("answer").length(); i < len; i++) {
						String SYMBOL = outputobject.getJSONArray("answer").getString(i);
						if (SYMBOL.substring(Math.max(SYMBOL.length() - 2, 0)).indexOf(".g") >= 0
								|| SYMBOL.substring(Math.max(SYMBOL.length() - 2, 0)).indexOf(".m") >= 0
								|| SYMBOL.substring(Math.max(SYMBOL.length() - 2, 0)).indexOf(".f") >= 0
								|| SYMBOL.substring(Math.max(SYMBOL.length() - 2, 0)).indexOf(".a") >= 0) {
							logger.info("LOOP RESULT :" + SYMBOL);
							JSONObject symbolobj = new JSONObject();
							symbolobj.put("SYMBOL", SYMBOL);
							path = "/api/symbol/get_group?symbol=" + SYMBOL + "&group=wi\\real\\SmartA ";
							try {
								responsestr = httpUtils.sendGet(this.serverinfo, path);
								if (responsestr.indexOf("0 Done") > 0) {
									logger.info("API RESULT" + responsestr);
									JSONObject newoutputobject = new JSONObject(responsestr);
									double swaplong = newoutputobject.getJSONObject("answer").getDouble("SwapLong");
									double swapshort = newoutputobject.getJSONObject("answer").getDouble("SwapShort");
									symbolobj.put("SHORT", swapshort);
									symbolobj.put("LONG", swaplong);
									jarray.put(symbolobj);
									logger.info("SWAP RESULT:" + swaplong + "," + swapshort);
								}
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
					}
					outputanswer.put("answer", jarray);
					responsestr = outputanswer.toString();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/getdailyreport" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView getdailyreport(HttpServletRequest request, Model model) {
		logger.info("Get getdailyreport ........" + this.serverinfo);
		String from = request.getParameter("f");
		String to = request.getParameter("t");
		String login = request.getParameter("l");
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			HttpSession session = request.getSession();
			long unixtimenow = System.currentTimeMillis() / 1000L;
			long unixtime1yearbefore = unixtimenow - 31536000L;
			unixtimenow = (unixtimenow + 31536000L) * 1000L;
			String path = "/api/daily_get_light?from=" + from + "&to=" + to + "&login=" + login;
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0)
					logger.info("API RESULT" + responsestr);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/getgroup" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView getdailygetgroupreport(HttpServletRequest request, Model model) {
		logger.info("Get getgroup ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/manager/get?login=" + (String) session.getAttribute("s_Login");
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("API RESULT" + responsestr);
					JSONObject jstring = new JSONObject(responsestr);
					String retcode = jstring.getString("retcode");
					JSONArray answer_array = jstring.getJSONArray("answer");
					JSONObject managerObj = answer_array.getJSONObject(0);
					JSONArray managerManagedGroup = managerObj.getJSONArray("Groups");
					JSONObject outputjson = new JSONObject();
					outputjson.put("retcode", "0 Done");
					JSONArray grouparray = new JSONArray();
					if (managerManagedGroup != null && managerManagedGroup.length() > 0)
						for (int i = 0; i < managerManagedGroup.length(); i++) {
							String group = managerManagedGroup.getJSONObject(i).getString("Group");
							path = "/api/group/get?group=" + group;
							try {
								responsestr = httpUtils.sendGet(this.serverinfo, path);
								if (responsestr.indexOf("0 Done") > 0) {
									logger.info("Groupinfo" + responsestr);
									JSONObject jobj = new JSONObject(responsestr);
									String groupName = jobj.getJSONObject("answer").getString("Group");
									String groupDisplayName = jobj.getJSONObject("answer").getString("CompanyCatalog");
									JSONObject groupobj = new JSONObject();
									if (groupDisplayName != null && groupDisplayName != "") {
										groupobj.put("name", groupDisplayName);
									} else {
										groupobj.put("name", groupName);
									}
									groupobj.put("value", groupName);
									grouparray.put(groupobj);
								}
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
					outputjson.put("answer", grouparray);
					responsestr = outputjson.toString();
					logger.info("finaloutput : " + responsestr);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/getgrouplogins" }, consumes = { "application/json" }, produces = { "application/json" })
	public ModelAndView getgrouplogins(@RequestBody String body, HttpServletRequest request) throws SQLException {
		ModelAndView mav = new ModelAndView("jsonView");
		JSONObject jsonbodyobj = new JSONObject(body);
		String group = jsonbodyobj.getString("group");
		logger.info("Welcome getgrouplogins: ");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/user/get_batch?group=" + group;
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("API RESULT" + responsestr);
					logger.info("finaloutput : " + responsestr);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/getGroupPositions" }, consumes = { "application/json" }, produces = { "application/json" })
	public ModelAndView getGroupPositions(@RequestBody String body, HttpServletRequest request) throws SQLException {
		ModelAndView mav = new ModelAndView("jsonView");
		JSONObject jsonbodyobj = new JSONObject(body);
		String group = jsonbodyobj.getString("group");
		logger.info("Welcome getGroupPositions: ");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/position/get_batch?group=" + group;
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("API RESULT" + responsestr);
					logger.info("finaloutput : " + responsestr);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/getLoginTradingPositions" }, consumes = { "application/json" }, produces = {
			"application/json" })
	public ModelAndView getLoginTradingPositions(@RequestBody String body, HttpServletRequest request)
			throws SQLException {
		ModelAndView mav = new ModelAndView("jsonView");
		JSONObject jsonbodyobj = new JSONObject(body);
		String login = jsonbodyobj.getString("login");
		logger.info("Welcome getLoginTradingPositions: ");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/position/get_batch?login=" + login;
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("API RESULT" + responsestr);
					logger.info("finaloutput : " + responsestr);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/getGroupHistory" }, consumes = { "application/json" }, produces = { "application/json" })
	public ModelAndView getGroupHistory(@RequestBody String body, HttpServletRequest request) throws SQLException {
		ModelAndView mav = new ModelAndView("jsonView");
		JSONObject jsonbodyobj = new JSONObject(body);
		String group = jsonbodyobj.getString("group");
		logger.info("Welcome getGroupHistory: ");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		long unixtimenow = System.currentTimeMillis() / 1000L;
		long unixtime1yearbefore = unixtimenow - 31536000L;
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/history/get_batch?group=" + group + "&from=" + unixtime1yearbefore + "&to="
					+ unixtimenow;
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("API RESULT" + responsestr);
					logger.info("finaloutput : " + responsestr);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/getLoginTradingHistory" }, consumes = { "application/json" }, produces = {
			"application/json" })
	public ModelAndView getLoginTradingHistory(@RequestBody String body, HttpServletRequest request)
			throws SQLException {
		ModelAndView mav = new ModelAndView("jsonView");
		JSONObject jsonbodyobj = new JSONObject(body);
		String login = jsonbodyobj.getString("login");
		logger.info("Welcome getLoginTradingHistory: ");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		long unixtimenow = System.currentTimeMillis() / 1000L;
		long unixtime1yearbefore = unixtimenow - 31536000L;
		unixtimenow += 31536000L;
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/deal/get_batch?login=" + login + "&from=" + unixtime1yearbefore + "&to=" + unixtimenow;
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("API RESULT" + responsestr);
					logger.info("finaloutput : " + responsestr);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/getFundHistory" }, consumes = { "application/json" }, produces = { "application/json" })
	public ModelAndView getFundHistory(@RequestBody String body, HttpServletRequest request) throws SQLException {
		ModelAndView mav = new ModelAndView("jsonView");
		JSONObject jsonbodyobj = new JSONObject(body);
		logger.info("Welcome getFundHistory: ");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		JSONObject fundeobj = new JSONObject(GetFundAccountBalance(request));
		if (fundeobj.getString("retcode").indexOf("0 Done") >= 0) {
			String FundAccountNumber = fundeobj.getJSONObject("answer").getString("FundAccountNo");
			logger.info(FundAccountNumber);
			long unixtimenow = System.currentTimeMillis() / 1000L;
			long unixtime1yearbefore = unixtimenow - 31536000L;
			unixtimenow += 31536000L;
			if (httpUtils.sendAuth(this.serverinfo)) {
				String path = "/api/deal/get_batch?login=" + FundAccountNumber + "&from=" + unixtime1yearbefore + "&to="
						+ unixtimenow + "&type=2";
				try {
					responsestr = httpUtils.sendGet(this.serverinfo, path);
					if (responsestr.indexOf("0 Done") > 0) {
						logger.info("API RESULT" + responsestr);
						logger.info("finaloutput : " + responsestr);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		} else {
			responsestr = fundeobj.toString();
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/getmyaccountlist" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView getmyaccountlist(HttpServletRequest request, Model model) {
		logger.info("Get getgroup ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/client/user/get_logins?client=" + (String) session.getAttribute("s_Login");
			logger.info("API path" + path);
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("API RESULT" + responsestr);
					JSONObject jobj = new JSONObject(responsestr);
					JSONObject answer = jobj.getJSONObject("answer");
					JSONArray jarray = answer.getJSONArray((String) session.getAttribute("s_Login"));
					jobj.remove("answer");
					jobj.put("answer", jarray);
					responsestr = jobj.toString();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/GetAllTopicComment" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView getClientCommentlist(HttpServletRequest request, Model model) {
		logger.info("Get getClientCommentlist ........" + this.serverinfo);
		String index = request.getParameter("index");
		String clientID = request.getParameter("id");
		
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		responsestr = FundConfugurationCommentJSON(request,clientID);
		if (responsestr.indexOf("0 Done") >= 0) {
			JSONObject job = new JSONObject(responsestr);
			logger.info("API path" + responsestr);
			String CommentConfiguration = job.getString("answer");
			JSONObject CommentConfigurationobj = new JSONObject(CommentConfiguration);
			JSONArray commentlist = CommentConfigurationobj.getJSONArray("CommentConfiguration")
					.getJSONObject(Integer.parseInt(index)).getJSONArray("CommentList");
			String cmdArray = "";
			for (int i = 0; i < commentlist.length(); i++) {
				cmdArray = String.valueOf(cmdArray) + commentlist.getInt(i);
				if (i != commentlist.length())
					cmdArray = String.valueOf(cmdArray) + ",";
			}
			logger.info("Get cmdArray ........" + cmdArray);
			logger.info("Get CommentConfiguration ........" + CommentConfigurationobj.toString());
			if (httpUtils.sendAuth(this.serverinfo)) {
				String path = "/api/comment/get?id=" + cmdArray;
				logger.info("API path" + path);
				try {
					responsestr = httpUtils.sendGet(this.serverinfo, path);
					if (responsestr.indexOf("0 Done") > 0) {
						// console console = new console(this);
						// console.log(responsestr);
					}
				} catch (Exception e) {
					e.printStackTrace();
					JSONObject output = new JSONObject();
					output.put("retcode", "1 Error");
					output.put("answer", "Server Error, Please Try again later");
					responsestr = output.toString();
				}
			}
		}
		else
		{
			logger.info(responsestr);
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/topicreply" }, consumes = { "application/json" }, produces = { "application/json" })
	public ModelAndView topicreply(@RequestBody String body, HttpServletRequest request) throws SQLException {
		JSONObject jsonbodyobj = new JSONObject(body);
		String index = jsonbodyobj.getString("index");
		String reply = jsonbodyobj.getString("reply");
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		String clientID = request.getParameter("id");
		responsestr = FundConfugurationCommentJSON(request,clientID);
		if (responsestr.indexOf("0 Done") >= 0) {
			JSONObject job = new JSONObject(responsestr);
			logger.info("API path" + responsestr);
			String CommentConfiguration = job.getString("answer");
			JSONObject CommentConfigurationobj = new JSONObject(CommentConfiguration);
			JSONArray commentlist = CommentConfigurationobj.getJSONArray("CommentConfiguration")
					.getJSONObject(Integer.parseInt(index)).getJSONArray("CommentList");
			String ClientID = (new JSONObject(job.getString("answer"))).getString("ClientID");
			String commentID = job.getString("commentID");
			JSONObject outputanswer = new JSONObject();
			long unixtimenow = System.currentTimeMillis() / 1000L;
			outputanswer.put("RelatedClient", ClientID);
			outputanswer.put("Flags", 0);
			outputanswer.put("Extra", "CR");
			outputanswer.put("CommentType", 0);
			outputanswer.put("Text", String.valueOf(unixtimenow) + "#CR#" + reply);
			if (httpUtils.sendAuth(this.serverinfo)) {
				String path = "/api/comment/add";
				try {
					responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
					System.out.println("#### response" + responsestr);
					if (responsestr.indexOf("0 Done") >= 0) {
						JSONObject jobb = new JSONObject(responsestr);
						int configurationcmdID = jobb.getJSONArray("answer").getJSONObject(0).getInt("id");
						logger.info("configurationcmdID: " + configurationcmdID);
						commentlist.put(configurationcmdID);
						CommentConfigurationobj.getJSONArray("CommentConfiguration")
								.getJSONObject(Integer.parseInt(index)).remove("CommentList");
						CommentConfigurationobj.getJSONArray("CommentConfiguration")
								.getJSONObject(Integer.parseInt(index)).put("CommentList", commentlist);
						CommentConfigurationobj.getJSONArray("CommentConfiguration")
								.getJSONObject(Integer.parseInt(index)).remove("Isreply");
						CommentConfigurationobj.getJSONArray("CommentConfiguration")
								.getJSONObject(Integer.parseInt(index)).put("Isreply", 0);
						logger.info("sss" + responsestr);
						logger.info(CommentConfigurationobj.toString());
						outputanswer = new JSONObject();
						outputanswer.put("Text", CommentConfigurationobj.toString());
						outputanswer.put("RecordID", commentID);
						outputanswer.put("RelatedClient", ClientID);
						if (httpUtils.sendAuth(this.serverinfo)) {
							path = "/api/comment/update";
							try {
								responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
								System.out.println("#### response" + responsestr);
								logger.info("resp: " + responsestr);
								if (responsestr.indexOf("0 Done") >= 0) {
									jobb = new JSONObject(responsestr);
									configurationcmdID = jobb.getJSONArray("answer").getJSONObject(0).getInt("id");
									logger.info("configurationcmdID: " + configurationcmdID);
								}
							} catch (Exception e) {
								e.printStackTrace();
								JSONObject output = new JSONObject();
								output.put("retcode", "1 Error");
								output.put("answer", "Server Error, Please Try again later");
								responsestr = output.toString();
							}
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
					JSONObject output = new JSONObject();
					output.put("retcode", "1 Error");
					output.put("answer", "Server Error, Please Try again later");
					responsestr = output.toString();
				}
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/customerservicescloserequest" }, consumes = { "application/json" }, produces = {
			"application/json" })
	public ModelAndView customerservicescloserequest(@RequestBody String body, HttpServletRequest request)
			throws SQLException {
		JSONObject jsonbodyobj = new JSONObject(body);
		String index = jsonbodyobj.getString("index");
		String reply = "We are closing this ticket due to inactivity. If the problem still exists, please open a new ticket.";
		String clientID = jsonbodyobj.getString("cid");
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		if (CustomerServices.isCustomerServices((String) session.getAttribute("s_Login"))) {
			responsestr = FundConfugurationCommentJSONByClientID(request, clientID);
			if (responsestr.indexOf("0 Done") >= 0) {
				JSONObject job = new JSONObject(responsestr);
				logger.info("API path" + responsestr);
				String CommentConfiguration = job.getString("answer");
				JSONObject CommentConfigurationobj = new JSONObject(CommentConfiguration);
				JSONArray commentlist = CommentConfigurationobj.getJSONArray("CommentConfiguration")
						.getJSONObject(Integer.parseInt(index)).getJSONArray("CommentList");
				String ClientID = (new JSONObject(job.getString("answer"))).getString("ClientID");
				String commentID = job.getString("commentID");
				JSONObject outputanswer = new JSONObject();
				long unixtimenow = System.currentTimeMillis() / 1000L;
				outputanswer.put("RelatedClient", ClientID);
				outputanswer.put("Flags", 0);
				outputanswer.put("Extra", "AR");
				outputanswer.put("CommentType", 0);
				outputanswer.put("Text", String.valueOf(unixtimenow) + "#AR#" + reply);
				if (httpUtils.sendAuth(this.serverinfo)) {
					String path = "/api/comment/add";
					try {
						responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
						System.out.println("#### response" + responsestr);
						if (responsestr.indexOf("0 Done") >= 0) {
							JSONObject jobb = new JSONObject(responsestr);
							int configurationcmdID = jobb.getJSONArray("answer").getJSONObject(0).getInt("id");
							logger.info("configurationcmdID: " + configurationcmdID);
							commentlist.put(configurationcmdID);
							CommentConfigurationobj.getJSONArray("CommentConfiguration")
									.getJSONObject(Integer.parseInt(index)).remove("CommentList");
							CommentConfigurationobj.getJSONArray("CommentConfiguration")
									.getJSONObject(Integer.parseInt(index)).put("CommentList", commentlist);
							CommentConfigurationobj.getJSONArray("CommentConfiguration")
									.getJSONObject(Integer.parseInt(index)).remove("Isreply");
							CommentConfigurationobj.getJSONArray("CommentConfiguration")
									.getJSONObject(Integer.parseInt(index)).put("Isreply", 1);
							CommentConfigurationobj.getJSONArray("CommentConfiguration")
									.getJSONObject(Integer.parseInt(index)).remove("Status");
							CommentConfigurationobj.getJSONArray("CommentConfiguration")
									.getJSONObject(Integer.parseInt(index)).put("Status", "Closed");
							logger.info("sss" + responsestr);
							logger.info(CommentConfigurationobj.toString());
							outputanswer = new JSONObject();
							outputanswer.put("Text", CommentConfigurationobj.toString());
							outputanswer.put("RecordID", commentID);
							outputanswer.put("RelatedClient", ClientID);
							if (httpUtils.sendAuth(this.serverinfo)) {
								path = "/api/comment/update";
								try {
									responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
									System.out.println("#### response" + responsestr);
									logger.info("resp: " + responsestr);
									if (responsestr.indexOf("0 Done") >= 0) {
										jobb = new JSONObject(responsestr);
										configurationcmdID = jobb.getJSONArray("answer").getJSONObject(0).getInt("id");
										logger.info("configurationcmdID: " + configurationcmdID);
										responsestr = getCommentByID(request,
												GetCustomerServicesAdminCommentID(request));
										if (responsestr.indexOf("New") >= 0 && responsestr.indexOf("All") >= 0) {
											JSONObject CommentObj = new JSONObject(responsestr);
											String textfield = CommentObj.getJSONArray("answer").getJSONObject(0)
													.getString("Text");
											JSONObject jsonObject = new JSONObject(textfield);
											JSONArray newJsonArray = jsonObject.getJSONArray("New");
											for (int i = 0; i < newJsonArray.length(); i++) {
												if (newJsonArray.get(i).equals(ClientID)) {
													newJsonArray.remove(i);
													break;
												}
											}
											responsestr = updateCommentTextField(
													String.valueOf(CustomerServices.getcustomerServicesClientID()),
													GetCustomerServicesAdminCommentID(request), jsonObject.toString());
										}
									}
								} catch (Exception e) {
									e.printStackTrace();
									JSONObject output = new JSONObject();
									output.put("retcode", "1 Error");
									output.put("answer", "Server Error, Please Try again later");
									responsestr = output.toString();
								}
							}
						}
					} catch (Exception e) {
						e.printStackTrace();
						JSONObject output = new JSONObject();
						output.put("retcode", "1 Error");
						output.put("answer", "Server Error, Please Try again later");
						responsestr = output.toString();
					}
				}
			}
		} else {
			JSONObject output = new JSONObject();
			output.put("retcode", "1 Error");
			output.put("answer", "unautorized admin");
			responsestr = output.toString();
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/customerservicescloseWithdrawalrequest" }, consumes = { "application/json" }, produces = {
			"application/json" })
	public ModelAndView customerservicescloseWithdrawalrequest(@RequestBody String body, HttpServletRequest request)
			throws SQLException {
		JSONObject jsonbodyobj = new JSONObject(body);
		String index = jsonbodyobj.getString("index");
		String reply = "We are closing this ticket due to withdrawal process had completed. If the problem still exists, please open a new ticket.";
		String clientID = jsonbodyobj.getString("cid");
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		if (CustomerServices.isCustomerServices((String) session.getAttribute("s_Login"))) {
			responsestr = FundConfugurationCommentJSONByClientID(request, clientID);
			if (responsestr.indexOf("0 Done") >= 0) {
				JSONObject job = new JSONObject(responsestr);
				logger.info("API path" + responsestr);
				String CommentConfiguration = job.getString("answer");
				JSONObject CommentConfigurationobj = new JSONObject(CommentConfiguration);
				JSONArray commentlist = CommentConfigurationobj.getJSONArray("CommentConfiguration")
						.getJSONObject(Integer.parseInt(index)).getJSONArray("CommentList");
				String ClientID = (new JSONObject(job.getString("answer"))).getString("ClientID");
				String commentID = job.getString("commentID");
				JSONObject outputanswer = new JSONObject();
				long unixtimenow = System.currentTimeMillis() / 1000L;
				outputanswer.put("RelatedClient", ClientID);
				outputanswer.put("Flags", 0);
				outputanswer.put("Extra", "AR");
				outputanswer.put("CommentType", 0);
				outputanswer.put("Text", String.valueOf(unixtimenow) + "#AR#" + reply);
				if (httpUtils.sendAuth(this.serverinfo)) {
					String path = "/api/comment/add";
					try {
						responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
						System.out.println("#### response" + responsestr);
						if (responsestr.indexOf("0 Done") >= 0) {
							JSONObject jobb = new JSONObject(responsestr);
							int configurationcmdID = jobb.getJSONArray("answer").getJSONObject(0).getInt("id");
							logger.info("configurationcmdID: " + configurationcmdID);
							commentlist.put(configurationcmdID);
							CommentConfigurationobj.getJSONArray("CommentConfiguration")
									.getJSONObject(Integer.parseInt(index)).remove("CommentList");
							CommentConfigurationobj.getJSONArray("CommentConfiguration")
									.getJSONObject(Integer.parseInt(index)).put("CommentList", commentlist);
							CommentConfigurationobj.getJSONArray("CommentConfiguration")
									.getJSONObject(Integer.parseInt(index)).remove("Isreply");
							CommentConfigurationobj.getJSONArray("CommentConfiguration")
									.getJSONObject(Integer.parseInt(index)).put("Isreply", 1);
							CommentConfigurationobj.getJSONArray("CommentConfiguration")
									.getJSONObject(Integer.parseInt(index)).remove("Status");
							CommentConfigurationobj.getJSONArray("CommentConfiguration")
									.getJSONObject(Integer.parseInt(index)).put("Status", "Processed");
							logger.info("sss" + responsestr);
							logger.info(CommentConfigurationobj.toString());
							outputanswer = new JSONObject();
							outputanswer.put("Text", CommentConfigurationobj.toString());
							outputanswer.put("RecordID", commentID);
							outputanswer.put("RelatedClient", ClientID);
							if (httpUtils.sendAuth(this.serverinfo)) {
								path = "/api/comment/update";
								try {
									responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
									System.out.println("#### response" + responsestr);
									logger.info("resp: " + responsestr);
									if (responsestr.indexOf("0 Done") >= 0) {
										jobb = new JSONObject(responsestr);
										configurationcmdID = jobb.getJSONArray("answer").getJSONObject(0).getInt("id");
										logger.info("configurationcmdID: " + configurationcmdID);
										responsestr = getCommentByID(request,
												GetCustomerServicesAdminCommentID(request));
										if (responsestr.indexOf("New") >= 0 && responsestr.indexOf("All") >= 0) {
											JSONObject CommentObj = new JSONObject(responsestr);
											String textfield = CommentObj.getJSONArray("answer").getJSONObject(0)
													.getString("Text");
											JSONObject jsonObject = new JSONObject(textfield);
											JSONArray newJsonArray = jsonObject.getJSONArray("New");
											for (int i = 0; i < newJsonArray.length(); i++) {
												if (newJsonArray.get(i).equals(ClientID)) {
													newJsonArray.remove(i);
													break;
												}
											}
											responsestr = updateCommentTextField(
													String.valueOf(CustomerServices.getcustomerServicesClientID()),
													GetCustomerServicesAdminCommentID(request), jsonObject.toString());
										}
									}
								} catch (Exception e) {
									e.printStackTrace();
									JSONObject output = new JSONObject();
									output.put("retcode", "1 Error");
									output.put("answer", "Server Error, Please Try again later");
									responsestr = output.toString();
								}
							}
						}
					} catch (Exception e) {
						e.printStackTrace();
						JSONObject output = new JSONObject();
						output.put("retcode", "1 Error");
						output.put("answer", "Server Error, Please Try again later");
						responsestr = output.toString();
					}
				}
			}
		} else {
			JSONObject output = new JSONObject();
			output.put("retcode", "1 Error");
			output.put("answer", "unautorized admin");
			responsestr = output.toString();
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/customerservicestopicreply" }, consumes = { "application/json" }, produces = {
			"application/json" })
	public ModelAndView customerservicestopicreply(@RequestBody String body, HttpServletRequest request)
			throws SQLException {
		JSONObject jsonbodyobj = new JSONObject(body);
		String index = jsonbodyobj.getString("index");
		String reply = jsonbodyobj.getString("reply");
		String clientID = jsonbodyobj.getString("cid");
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		if (CustomerServices.isCustomerServices((String) session.getAttribute("s_Login"))) {
			responsestr = FundConfugurationCommentJSONByClientID(request, clientID);
			if (responsestr.indexOf("0 Done") >= 0) {
				JSONObject job = new JSONObject(responsestr);
				logger.info("API path" + responsestr);
				String CommentConfiguration = job.getString("answer");
				JSONObject CommentConfigurationobj = new JSONObject(CommentConfiguration);
				JSONArray commentlist = CommentConfigurationobj.getJSONArray("CommentConfiguration")
						.getJSONObject(Integer.parseInt(index)).getJSONArray("CommentList");
				String ClientID = (new JSONObject(job.getString("answer"))).getString("ClientID");
				String commentID = job.getString("commentID");
				JSONObject outputanswer = new JSONObject();
				long unixtimenow = System.currentTimeMillis() / 1000L;
				outputanswer.put("RelatedClient", ClientID);
				outputanswer.put("Flags", 0);
				outputanswer.put("Extra", "AR");
				outputanswer.put("CommentType", 0);
				outputanswer.put("Text", String.valueOf(unixtimenow) + "#AR#" + reply);
				if (httpUtils.sendAuth(this.serverinfo)) {
					String path = "/api/comment/add";
					try {
						responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
						System.out.println("#### response" + responsestr);
						if (responsestr.indexOf("0 Done") >= 0) {
							JSONObject jobb = new JSONObject(responsestr);
							int configurationcmdID = jobb.getJSONArray("answer").getJSONObject(0).getInt("id");
							logger.info("configurationcmdID: " + configurationcmdID);
							commentlist.put(configurationcmdID);
							CommentConfigurationobj.getJSONArray("CommentConfiguration")
									.getJSONObject(Integer.parseInt(index)).remove("CommentList");
							CommentConfigurationobj.getJSONArray("CommentConfiguration")
									.getJSONObject(Integer.parseInt(index)).put("CommentList", commentlist);
							CommentConfigurationobj.getJSONArray("CommentConfiguration")
									.getJSONObject(Integer.parseInt(index)).remove("Isreply");
							CommentConfigurationobj.getJSONArray("CommentConfiguration")
									.getJSONObject(Integer.parseInt(index)).put("Isreply", 1);
							logger.info("sss" + responsestr);
							logger.info(CommentConfigurationobj.toString());
							outputanswer = new JSONObject();
							outputanswer.put("Text", CommentConfigurationobj.toString());
							outputanswer.put("RecordID", commentID);
							outputanswer.put("RelatedClient", ClientID);
							if (httpUtils.sendAuth(this.serverinfo)) {
								path = "/api/comment/update";
								try {
									responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
									System.out.println("#### response" + responsestr);
									logger.info("resp: " + responsestr);
									if (responsestr.indexOf("0 Done") >= 0) {
										jobb = new JSONObject(responsestr);
										configurationcmdID = jobb.getJSONArray("answer").getJSONObject(0).getInt("id");
										logger.info("configurationcmdID: " + configurationcmdID);
									}
								} catch (Exception e) {
									e.printStackTrace();
									JSONObject output = new JSONObject();
									output.put("retcode", "1 Error");
									output.put("answer", "Server Error, Please Try again later");
									responsestr = output.toString();
								}
							}
						}
					} catch (Exception e) {
						e.printStackTrace();
						JSONObject output = new JSONObject();
						output.put("retcode", "1 Error");
						output.put("answer", "Server Error, Please Try again later");
						responsestr = output.toString();
					}
				}
			}
		} else {
			JSONObject output = new JSONObject();
			output.put("retcode", "1 Error");
			output.put("answer", "unautorized admin");
			responsestr = output.toString();
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	public String updateCommentTextField(String ClientID, String commentID, String Text) {
		String responsestr = "";
		JSONObject outputanswer = new JSONObject();
		outputanswer.put("Text", Text);
		outputanswer.put("RecordID", commentID);
		outputanswer.put("RelatedClient", ClientID);
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/comment/update";
			try {
				responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
				System.out.println("#### response" + responsestr);
				logger.info("resp: " + responsestr);
				if (responsestr.indexOf("0 Done") >= 0) {
					JSONObject jobb = new JSONObject(responsestr);
					int configurationcmdID = jobb.getJSONArray("answer").getJSONObject(0).getInt("id");
					logger.info("configurationcmdID: " + configurationcmdID);
				}
			} catch (Exception e) {
				e.printStackTrace();
				JSONObject output = new JSONObject();
				output.put("retcode", "1 Error");
				output.put("answer", "Server Error, Please Try again later");
				responsestr = output.toString();
			}
		}
		return responsestr;
	}

	public boolean checkifConfugurationCommentisSet(HttpServletRequest request, String FundAccountNo) {
		boolean output = false;
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		String path = "/api/user/get?login=" + FundAccountNo;
		if (httpUtils.sendAuth(this.serverinfo))
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("Get GetFundAccountBalance ..ewar" + responsestr);
					JSONObject jobj = new JSONObject(responsestr);
					String ClientID = jobj.getJSONObject("answer").getString("ClientID");
					path = "/api/client/get?id=" + ClientID;
					try {
						responsestr = httpUtils.sendGet(this.serverinfo, path);
						logger.info("Get GetFundAccountBalance ..11" + responsestr);
						if (responsestr.indexOf("0 Done") > 0) {
							// console console = new console(this);
							// console.log(ClientID);
							jobj = new JSONObject(responsestr);
							String CommentConfigurationID = jobj.getJSONArray("answer").getJSONObject(0)
									.getString("Comment");
							if (CommentConfigurationID.indexOf("cid") >= 0)
								output = true;
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		logger.info("isinitiateComment: " + output);
		return output;
	}

	/*@RequestMapping(value = { "/InitialFundConfugurationComment" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView AddFundConfugurationComment(HttpServletRequest request, Model model) {
		logger.info("Get AddFundConfugurationComment ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpSession session = request.getSession();
		responsestr = GetFundAccountClientID(request);
		if (responsestr.indexOf("0 Done") >= 0) {
			JSONObject job = new JSONObject(responsestr);
			String ClientID = job.getJSONObject("answer").getString("ClientID");
			String FundAccountNo = job.getJSONObject("answer").getString("FundAccountNo");
			if (!checkifConfugurationCommentisSet(request, FundAccountNo)) {
				JSONObject outputanswer = new JSONObject();
				outputanswer.put("RelatedClient", ClientID);
				outputanswer.put("Flags", 0);
				outputanswer.put("Extra", "test");
				outputanswer.put("CommentType", 0);
				JSONObject commentconfiguration = new JSONObject();
				JSONArray configurationarray = new JSONArray();
				commentconfiguration.put("ClientID", ClientID);
				commentconfiguration.put("Platform", "Fund Manager");
				commentconfiguration.put("CommentConfiguration", configurationarray);
				outputanswer.put("Text", commentconfiguration.toString());
				logger.info("send Auth" + outputanswer.toString());
				HttpUtils httpUtils = new HttpUtils(this.serverinfo);
				if (httpUtils.sendAuth(this.serverinfo)) {
					String path = "/api/comment/add";
					try {
						responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
						System.out.println("#### response" + responsestr);
						if (responsestr.indexOf("0 Done") >= 0) {
							JSONObject jobb = new JSONObject(responsestr);
							int configurationcmdID = jobb.getJSONArray("answer").getJSONObject(0).getInt("id");
							logger.info("configurationcmdID: " + configurationcmdID);
							responsestr = AddCommentIDtoClientCommentField(request, ClientID,
									String.valueOf(configurationcmdID));
						}
					} catch (Exception e) {
						e.printStackTrace();
						JSONObject output = new JSONObject();
						output.put("retcode", "1 Error");
						output.put("answer", "Server Error, Please Try again later");
						responsestr = output.toString();
					}
				}
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}*/

	public boolean checkifCustomerServicesAdminCommentIsSet(HttpServletRequest request) {
		boolean output = false;
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/client/get?id=" + CustomerServices.getcustomerServicesClientID();
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				logger.info("Get checkifCustomerServicesAdminCommentIsSet ..11" + responsestr);
				if (responsestr.indexOf("0 Done") > 0) {
					JSONObject jobj = new JSONObject(responsestr);
					String CommentConfigurationID = jobj.getJSONArray("answer").getJSONObject(0).getString("Comment");
					if (CommentConfigurationID.indexOf("cid") >= 0)
						output = true;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		logger.info("isinitiateComment: " + output);
		return output;
	}

	public String GetCustomerServicesAdminCommentID(HttpServletRequest request) {
		String responsestr = "-1";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/client/get?id=" + CustomerServices.getcustomerServicesClientID();
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				logger.info("Get checkifCustomerServicesAdminCommentIsSet ..11" + responsestr);
				if (responsestr.indexOf("0 Done") > 0) {
					JSONObject jobj = new JSONObject(responsestr);
					String CommentConfigurationID = jobj.getJSONArray("answer").getJSONObject(0).getString("Comment");
					if (CommentConfigurationID.indexOf("cid") >= 0) {
						JSONObject commentobj = new JSONObject(CommentConfigurationID);
						String cid = commentobj.getString("cid");
						responsestr = cid;
					} else {
						responsestr = "-1";
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
				responsestr = "-1";
			}
		}
		logger.info("GetCustomerServicesAdminCommentID: " + responsestr);
		return responsestr;
	}

	@RequestMapping(value = { "/InitialCustomerServicesAdminComment" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView InitialCustomerServicesAdminComment(HttpServletRequest request, Model model) {
		logger.info("Get InitialCustomerServicesAdminComment ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpSession session = request.getSession();
		if (!checkifCustomerServicesAdminCommentIsSet(request)) {
			logger.info("checkifCustomerServicesAdminCommentIsSet is not set");
			JSONObject outputanswer = new JSONObject();
			outputanswer.put("RelatedClient", CustomerServices.getcustomerServicesClientID());
			outputanswer.put("Flags", 0);
			outputanswer.put("Extra", "JSON FOR CS");
			outputanswer.put("CommentType", 0);
			JSONObject commentconfiguration = new JSONObject();
			JSONArray configurationarray = new JSONArray();
			commentconfiguration.put("New", configurationarray);
			commentconfiguration.put("All", configurationarray);
			outputanswer.put("Text", commentconfiguration.toString());
			logger.info("send Auth" + outputanswer.toString());
			HttpUtils httpUtils = new HttpUtils(this.serverinfo);
			if (httpUtils.sendAuth(this.serverinfo)) {
				String path = "/api/comment/add";
				try {
					responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
					System.out.println("#### response" + responsestr);
					if (responsestr.indexOf("0 Done") >= 0) {
						JSONObject jobb = new JSONObject(responsestr);
						int CustomerServicesconfigurationcmdID = jobb.getJSONArray("answer").getJSONObject(0)
								.getInt("id");
						logger.info("configurationcmdID: " + CustomerServicesconfigurationcmdID);
						responsestr = AddcustomerservicesCommentIDtocustomerservicesClientCommentField(request,
								String.valueOf(CustomerServices.getcustomerServicesClientID()),
								String.valueOf(CustomerServicesconfigurationcmdID));
					}
				} catch (Exception e) {
					e.printStackTrace();
					JSONObject output = new JSONObject();
					output.put("retcode", "1 Error");
					output.put("answer", "Server Error, Please Try again later");
					responsestr = output.toString();
				}
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

/*	@RequestMapping(value = { "/GetFundConfugurationComment" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView GetFundConfugurationComment(HttpServletRequest request, Model model) {
		logger.info("Get GetFundConfugurationComment ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpSession session = request.getSession();
		responsestr = FundConfugurationCommentJSON(request);
		if (responsestr.indexOf("0 Done") >= 0) {
			JSONObject job = new JSONObject(responsestr);
			String answer = job.getString("answer");
			logger.info("answer" + answer);
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}*/

	@RequestMapping(value = { "/FundConfugurationCommentJSONByClientID" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView FundConfugurationCommentJSONByClientID(HttpServletRequest request, Model model) {
		logger.info("Get FundConfugurationCommentJSONByClientID ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		String clientID = request.getParameter("id");
		HttpSession session = request.getSession();
		responsestr = FundConfugurationCommentJSONByClientID(request, clientID);
		if (responsestr.indexOf("0 Done") >= 0) {
			JSONObject job = new JSONObject(responsestr);
			String answer = job.getString("answer");
			logger.info("answer" + answer);
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/CustomerServicesGetCommentUser" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView getcommentbyid(HttpServletRequest request, Model model) {
		HttpSession session = request.getSession();
		String id = request.getParameter("id");
		logger.info("Get CustomerServicesGetCommentUser ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		if (CustomerServices.isCustomerServices((String) session.getAttribute("s_Login"))) {
			responsestr = getCommentByID(request, GetCustomerServicesAdminCommentID(request));
			if(responsestr.indexOf("0 Done")>=0)
			{
				JSONObject jobj = new JSONObject(responsestr);
				JSONArray answerarray = jobj.getJSONArray("answer");
				JSONObject cmd = answerarray.getJSONObject(0);
				String Text  = cmd.getString("Text");
				JSONObject TextObj = new JSONObject(Text);
				JSONArray allarray = TextObj.getJSONArray("All");
				JSONArray newarray = TextObj.getJSONArray("New");
				for( int i =0; i< allarray.length();i++)
				{
					logger.info(allarray.getJSONObject(i).getString("FM"));
					allarray.getJSONObject(i).put("Name", getnamebylogin(allarray.getJSONObject(i).getString("FM")));
				}
				
				for( int i =0; i< newarray.length();i++)
				{
					logger.info(newarray.getJSONObject(i).getString("FM"));
					newarray.getJSONObject(i).put("Name", getnamebylogin(newarray.getJSONObject(i).getString("FM")));
				}
				
				TextObj.remove("All");
				TextObj.put("All", allarray);
				TextObj.remove("New");
				TextObj.put("New", newarray);
				cmd.remove("Text");
				cmd.put("Text", TextObj);
				answerarray.remove(0);
				answerarray.put(0,cmd);
				jobj.remove("answer");
				jobj.put("answer",answerarray);
				responsestr = jobj.toString();
				
				
				
				logger.info("text here:"+Text);
				
			}
			logger.info(responsestr);
		} else {
			JSONObject output = new JSONObject();
			output.put("retcode", "1 Error");
			output.put("answer", "unautorized admin");
			responsestr = output.toString();
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/insertNewCommentTopic" }, consumes = { "application/json" }, produces = {
			"application/json" })
	public ModelAndView insertNewCommentTopic(@RequestBody String body, HttpServletRequest request)
			throws SQLException {
		logger.info("Get insertNewCommentTopic ........" + this.serverinfo);
		JSONObject jsonbodyobj = new JSONObject(body);
		String title = jsonbodyobj.getString("title");
		String section = jsonbodyobj.getString("section");
		String content = jsonbodyobj.getString("content");
		logger.info("Get insertNewCommentTopic ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		String clientID = request.getParameter("id");
		HttpSession session = request.getSession();
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		responsestr = FundConfugurationCommentJSON(request,clientID);
		if (responsestr.indexOf("0 Done") >= 0) {
			JSONObject job = new JSONObject(responsestr);
			String answer = job.getString("answer");
			JSONObject answerobj = new JSONObject(answer);
			JSONArray CommentConfigurationArray = answerobj.getJSONArray("CommentConfiguration");
			String ClientID = answerobj.getString("ClientID");
			String commentID = job.getString("commentID");
			JSONObject newtopic = new JSONObject();
			long unixtimenow = System.currentTimeMillis() / 1000L;
			JSONObject outputanswer = new JSONObject();
			outputanswer.put("RelatedClient", ClientID);
			outputanswer.put("Flags", 0);
			outputanswer.put("Extra", "test");
			outputanswer.put("CommentType", 0);
			JSONObject commentconfiguration = new JSONObject();
			outputanswer.put("Text", String.valueOf(unixtimenow) + "#CR#" + content);
			if (httpUtils.sendAuth(this.serverinfo)) {
				String path = "/api/comment/add";
				try {
					responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
					System.out.println("#### response" + responsestr);
					if (responsestr.indexOf("0 Done") >= 0) {
						JSONObject jobb = new JSONObject(responsestr);
						int configurationcmdID = jobb.getJSONArray("answer").getJSONObject(0).getInt("id");
						logger.info("configurationcmdID: " + configurationcmdID);
						JSONArray commentlist = new JSONArray();
						commentlist.put(configurationcmdID);
						newtopic.put("Title", title);
						newtopic.put("index", CommentConfigurationArray.length());
						newtopic.put("Section", section);
						newtopic.put("CommentList", commentlist);
						newtopic.put("Status", "open");
						newtopic.put("CreateDate", unixtimenow);
						newtopic.put("Isreply", 0);
						CommentConfigurationArray.put(newtopic);
						answerobj.remove("CommentConfiguration");
						answerobj.put("CommentConfiguration", CommentConfigurationArray);
						logger.info("answerobj" + answerobj.toString());
						outputanswer = new JSONObject();
						outputanswer.put("Text", answerobj.toString());
						outputanswer.put("RecordID", commentID);
						outputanswer.put("RelatedClient", ClientID);
						if (httpUtils.sendAuth(this.serverinfo)) {
							path = "/api/comment/update";
							try {
								responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
								System.out.println("#### response" + responsestr);
								logger.info("resp: " + responsestr);
								if (responsestr.indexOf("0 Done") >= 0) {
									jobb = new JSONObject(responsestr);
									configurationcmdID = jobb.getJSONArray("answer").getJSONObject(0).getInt("id");
									logger.info("configurationcmdID: " + configurationcmdID);
									responsestr = getCommentByID(request, GetCustomerServicesAdminCommentID(request));
									if (responsestr.indexOf("New") >= 0 && responsestr.indexOf("All") >= 0) {
										JSONObject CommentObj = new JSONObject(responsestr);
										String textfield = CommentObj.getJSONArray("answer").getJSONObject(0)
												.getString("Text");
										JSONObject CSconfigurationobj = new JSONObject(textfield);
										JSONArray All = CSconfigurationobj.getJSONArray("All");
										JSONArray New = CSconfigurationobj.getJSONArray("New");
										int i = 0;
										while (i < All.length()) {
											if (All.getJSONObject(i).getString("FM")
													.indexOf((String) session.getAttribute("s_Login")) >= 0) {
												All.remove(i);
												logger.info("removing old element in all");
												i = 0;
												continue;
											}
											i++;
										}
										i = 0;
										while (i < New.length()) {
											if (New.getJSONObject(i).getString("FM")
													.indexOf((String) session.getAttribute("s_Login")) >= 0) {
												New.remove(i);
												logger.info("removing old element in new");
												i = 0;
												continue;
											}
											i++;
										}
										JSONObject infoobj = new JSONObject();
										infoobj.put("C", ClientID);
										infoobj.put("FM", session.getAttribute("s_Login"));
										infoobj.put("D", System.currentTimeMillis() / 1000L);
										All.put(infoobj);
										New.put(infoobj);
										CSconfigurationobj.remove("All");
										CSconfigurationobj.remove("New");
										CSconfigurationobj.put("All", All);
										CSconfigurationobj.put("New", New);
										responsestr = updateCommentTextField(
												String.valueOf(CustomerServices.getcustomerServicesClientID()),
												GetCustomerServicesAdminCommentID(request),
												CSconfigurationobj.toString());
									}
								}
							} catch (Exception e) {
								e.printStackTrace();
								JSONObject output = new JSONObject();
								output.put("retcode", "1 Error");
								output.put("answer", "Server Error, Please Try again later");
								responsestr = output.toString();
							}
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
					JSONObject output = new JSONObject();
					output.put("retcode", "1 Error");
					output.put("answer", "Server Error, Please Try again later");
					responsestr = output.toString();
				}
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

/*	@PostMapping(value = { "/insertNewWithdrawalRequest" }, consumes = { "application/json" }, produces = {
			"application/json" })
	public ModelAndView insertNewWithdrawalRequest(@RequestBody String body, HttpServletRequest request)
			throws SQLException {
		logger.info("Get insertNewWithdrawalRequest ........" + this.serverinfo);
		JSONObject jsonbodyobj = new JSONObject(body);
		long unixtimenow = System.currentTimeMillis() / 1000L;
		String money = jsonbodyobj.getString("money");
		String wallet = jsonbodyobj.getString("wallet");
		String Crypto = jsonbodyobj.getString("Crypto");
		String Code = jsonbodyobj.getString("Code");
		String FundAccount = jsonbodyobj.getString("FundAccount");
		String title = "New Withdrawal Request on :" + unixtimenow;
		String section = "Withdrawal";
		String content = "Fund Account : " + FundAccount + " , Withdrawal Amount : " + money
				+ "USD , Withdrawal Currency Type: " + Crypto + " (" + Code + "), Wallet Address: " + wallet;
		logger.info("Get insertNewWithdrawalRequest ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpSession session = request.getSession();
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		responsestr = FundConfugurationCommentJSON(request);
		if (responsestr.indexOf("0 Done") >= 0) {
			JSONObject job = new JSONObject(responsestr);
			String answer = job.getString("answer");
			JSONObject answerobj = new JSONObject(answer);
			JSONArray CommentConfigurationArray = answerobj.getJSONArray("CommentConfiguration");
			String ClientID = answerobj.getString("ClientID");
			String commentID = job.getString("commentID");
			JSONObject newtopic = new JSONObject();
			JSONObject outputanswer = new JSONObject();
			outputanswer.put("RelatedClient", ClientID);
			outputanswer.put("Flags", 0);
			outputanswer.put("Extra", "test");
			outputanswer.put("CommentType", 0);
			JSONObject commentconfiguration = new JSONObject();
			outputanswer.put("Text", String.valueOf(unixtimenow) + "#CR#" + content);
			if (httpUtils.sendAuth(this.serverinfo)) {
				String path = "/api/comment/add";
				try {
					responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
					System.out.println("#### response" + responsestr);
					if (responsestr.indexOf("0 Done") >= 0) {
						JSONObject jobb = new JSONObject(responsestr);
						int configurationcmdID = jobb.getJSONArray("answer").getJSONObject(0).getInt("id");
						logger.info("configurationcmdID: " + configurationcmdID);
						JSONArray commentlist = new JSONArray();
						commentlist.put(configurationcmdID);
						newtopic.put("Title", title);
						newtopic.put("index", CommentConfigurationArray.length());
						newtopic.put("Section", section);
						newtopic.put("CommentList", commentlist);
						newtopic.put("Status", "pending");
						newtopic.put("CreateDate", unixtimenow);
						newtopic.put("Isreply", 0);
						CommentConfigurationArray.put(newtopic);
						answerobj.remove("CommentConfiguration");
						answerobj.put("CommentConfiguration", CommentConfigurationArray);
						logger.info("answerobj" + answerobj.toString());
						outputanswer = new JSONObject();
						outputanswer.put("Text", answerobj.toString());
						outputanswer.put("RecordID", commentID);
						outputanswer.put("RelatedClient", ClientID);
						if (httpUtils.sendAuth(this.serverinfo)) {
							path = "/api/comment/update";
							try {
								responsestr = httpUtils.sendPost(this.serverinfo, path, outputanswer.toString());
								System.out.println("#### response" + responsestr);
								logger.info("resp: " + responsestr);
								if (responsestr.indexOf("0 Done") >= 0) {
									jobb = new JSONObject(responsestr);
									configurationcmdID = jobb.getJSONArray("answer").getJSONObject(0).getInt("id");
									logger.info("configurationcmdID: " + configurationcmdID);
									responsestr = getCommentByID(request, GetCustomerServicesAdminCommentID(request));
									if (responsestr.indexOf("New") >= 0 && responsestr.indexOf("All") >= 0) {
										JSONObject CommentObj = new JSONObject(responsestr);
										String textfield = CommentObj.getJSONArray("answer").getJSONObject(0)
												.getString("Text");
										JSONObject CSconfigurationobj = new JSONObject(textfield);
										JSONArray All = CSconfigurationobj.getJSONArray("All");
										JSONArray New = CSconfigurationobj.getJSONArray("New");
										int i = 0;
										while (i < All.length()) {
											if (All.getJSONObject(i).getString("FM")
													.indexOf((String) session.getAttribute("s_Login")) >= 0) {
												All.remove(i);
												logger.info("removing old element in all");
												i = 0;
												continue;
											}
											i++;
										}
										i = 0;
										while (i < New.length()) {
											if (New.getJSONObject(i).getString("FM")
													.indexOf((String) session.getAttribute("s_Login")) >= 0) {
												New.remove(i);
												logger.info("removing old element in new");
												i = 0;
												continue;
											}
											i++;
										}
										JSONObject infoobj = new JSONObject();
										infoobj.put("C", ClientID);
										infoobj.put("FM", session.getAttribute("s_Login"));
										infoobj.put("D", System.currentTimeMillis() / 1000L);
										All.put(infoobj);
										New.put(infoobj);
										CSconfigurationobj.remove("All");
										CSconfigurationobj.remove("New");
										CSconfigurationobj.put("All", All);
										CSconfigurationobj.put("New", New);
										responsestr = updateCommentTextField(
												String.valueOf(CustomerServices.getcustomerServicesClientID()),
												GetCustomerServicesAdminCommentID(request),
												CSconfigurationobj.toString());
									}
								}
							} catch (Exception e) {
								e.printStackTrace();
								JSONObject output = new JSONObject();
								output.put("retcode", "1 Error");
								output.put("answer", "Server Error, Please Try again later");
								responsestr = output.toString();
							}
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
					JSONObject output = new JSONObject();
					output.put("retcode", "1 Error");
					output.put("answer", "Server Error, Please Try again later");
					responsestr = output.toString();
				}
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}*/

	public String FundConfugurationCommentJSON(HttpServletRequest request , String clientid) {
		String responsestr = GetFundAccountClientID(request ,clientid);
		if (responsestr.indexOf("0 Done") >= 0) {
			JSONObject job = new JSONObject(responsestr);
			String ClientID = job.getJSONObject("answer").getString("ClientID");
			String configurationcmdID = job.getJSONObject("answer").getString("CommentConfigurationID");
			HttpUtils httpUtils = new HttpUtils(this.serverinfo);
			if (httpUtils.sendAuth(this.serverinfo)) {
				String path = "/api/comment/get?id=" + configurationcmdID;
				logger.info("API path" + path);
				try {
					responsestr = httpUtils.sendGet(this.serverinfo, path);
					if (responsestr.indexOf("0 Done") > 0) {
						job = new JSONObject(responsestr);
						String commandconfiguration = job.getJSONArray("answer").getJSONObject(0).getString("Text");
						job = new JSONObject();
						job.put("retcode", "0 Done");
						job.put("answer", commandconfiguration);
						job.put("commentID", configurationcmdID);
						// console console = new console(this);
						// console.log(responsestr);
						// console.log(commandconfiguration);
						// console.log(job.toString());
						responsestr = job.toString();
					}
				} catch (Exception e) {
					e.printStackTrace();
					JSONObject output = new JSONObject();
					output.put("retcode", "1 Error");
					output.put("answer", "Server Error, Please Try again later");
					responsestr = output.toString();
				}
			}
		}
		return responsestr;
	}

	public String FundConfugurationCommentJSONByClientID(HttpServletRequest request, String ClientID) {
		String responsestr = GetFundAccountByClientID(request, ClientID);
		if (responsestr.indexOf("0 Done") >= 0) {
			JSONObject job = new JSONObject(responsestr);
			String configurationcmdID = job.getJSONObject("answer").getString("CommentConfigurationID");
			HttpUtils httpUtils = new HttpUtils(this.serverinfo);
			if (httpUtils.sendAuth(this.serverinfo)) {
				String path = "/api/comment/get?id=" + configurationcmdID;
				logger.info("API path" + path);
				try {
					responsestr = httpUtils.sendGet(this.serverinfo, path);
					if (responsestr.indexOf("0 Done") > 0) {
						job = new JSONObject(responsestr);
						String commandconfiguration = job.getJSONArray("answer").getJSONObject(0).getString("Text");
						job = new JSONObject();
						job.put("retcode", "0 Done");
						job.put("answer", commandconfiguration);
						job.put("commentID", configurationcmdID);
						// console console = new console(this);
						// console.log(responsestr);
						// console.log(commandconfiguration);
						// console.log(job.toString());
						responsestr = job.toString();
					}
				} catch (Exception e) {
					e.printStackTrace();
					JSONObject output = new JSONObject();
					output.put("retcode", "1 Error");
					output.put("answer", "Server Error, Please Try again later");
					responsestr = output.toString();
				}
			}
		}
		return responsestr;
	}

	public String getCommentByID(HttpServletRequest request, String ID) {
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/comment/get?id=" + ID;
			logger.info("API path" + path);
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
			} catch (Exception e) {
				e.printStackTrace();
				JSONObject output = new JSONObject();
				output.put("retcode", "1 Error");
				output.put("answer", "Server Error, Please Try again later");
				responsestr = output.toString();
			}
		}
		return responsestr;
	}

	public String AddCommentIDtoClientCommentField(HttpServletRequest request, String ClientID,
			String CommentConfigurationID) {
		logger.info("Get AddFundConfugurationComment ........" + this.serverinfo);
		String responsestr = "";
		HttpSession session = request.getSession();
		JSONObject outputanswer = new JSONObject();
		JSONArray array = new JSONArray();
		outputanswer.put("RecordID", ClientID);
		JSONObject cidobj = new JSONObject();
		cidobj.put("cid", CommentConfigurationID);
		outputanswer.put("Comment", cidobj.toString());
		array.put(outputanswer);
		logger.info("send Auth" + array.toString());
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/client/update";
			try {
				responsestr = httpUtils.sendPost(this.serverinfo, path, array.toString());
				System.out.println("#### response" + responsestr);
			} catch (Exception e) {
				e.printStackTrace();
				JSONObject output = new JSONObject();
				output.put("retcode", "1 Error");
				output.put("answer", "Server Error, Please Try again later");
				responsestr = output.toString();
			}
		}
		return responsestr;
	}

	public String AddcustomerservicesCommentIDtocustomerservicesClientCommentField(HttpServletRequest request,
			String ClientID, String CommentConfigurationID) {
		logger.info("Get AddFundConfugurationComment ........" + this.serverinfo);
		String responsestr = "";
		HttpSession session = request.getSession();
		JSONObject outputanswer = new JSONObject();
		JSONArray array = new JSONArray();
		outputanswer.put("RecordID", ClientID);
		JSONObject cidobj = new JSONObject();
		cidobj.put("cid", CommentConfigurationID);
		outputanswer.put("Comment", cidobj.toString());
		array.put(outputanswer);
		logger.info("send Auth" + array.toString());
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/client/update";
			try {
				responsestr = httpUtils.sendPost(this.serverinfo, path, array.toString());
				System.out.println("#### response" + responsestr);
			} catch (Exception e) {
				e.printStackTrace();
				JSONObject output = new JSONObject();
				output.put("retcode", "1 Error");
				output.put("answer", "Server Error, Please Try again later");
				responsestr = output.toString();
			}
		}
		return responsestr;
	}

/*	@RequestMapping(value = { "/gab" }, method = { RequestMethod.GET }, produces = { "application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView gab(HttpServletRequest request, Model model) {
		logger.info("Get gab ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpSession session = request.getSession();
		responsestr = GetFundAccountClientID(request);
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}*/

	public String GetAccountBalance(HttpServletRequest request, String account) {
		logger.info("Get GetAccountBalance ........" + this.serverinfo);
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		if (account == "" || account == null) {
			JSONObject output = new JSONObject();
			output.put("retcode", "1 Error");
			output.put("answer", "Account Not Found");
			responsestr = output.toString();
		} else if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/user/get?login=" + account;
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				responsestr.indexOf("0 Done");
			} catch (Exception e) {
				e.printStackTrace();
				JSONObject output = new JSONObject();
				output.put("retcode", "1 Error");
				output.put("answer", "Server Error, Please Try again later");
				responsestr = output.toString();
			}
		}
		return responsestr;
	}

	public String GetFundAccountBalance(HttpServletRequest request) {
		String FundAccountNo = "";
		logger.info("Get GetFundAccountBalance ........" + this.serverinfo);
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/user/get?login=" + (String) session.getAttribute("s_Login");
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					JSONObject jobj = new JSONObject(responsestr);
					FundAccountNo = jobj.getJSONObject("answer").getString("Account");
					// console console = new console(this);
					// console.log(FundAccountNo);
					if (FundAccountNo == "" || FundAccountNo == null) {
						JSONObject output = new JSONObject();
						output.put("retcode", "1 Error");
						output.put("answer", "Fund Account Not Found, Please Contact Administrator.");
						responsestr = output.toString();
					} else if (httpUtils.sendAuth(this.serverinfo)) {
						path = "/api/user/get?login=" + FundAccountNo;
						try {
							responsestr = httpUtils.sendGet(this.serverinfo, path);
							if (responsestr.indexOf("0 Done") > 0) {
								jobj = new JSONObject(responsestr);
								String Balance = jobj.getJSONObject("answer").getString("Balance");
								// console = new console(this);
								// console.log(Balance);
								JSONObject output = new JSONObject();
								output.put("retcode", "0 Done");
								JSONObject answer = new JSONObject();
								answer.put("Balance", Balance);
								answer.put("FundAccountNo", FundAccountNo);
								output.put("answer", answer);
								responsestr = output.toString();
								// console.log(output.toString());
							}
						} catch (Exception e) {
							e.printStackTrace();
							JSONObject output = new JSONObject();
							output.put("retcode", "1 Error");
							output.put("answer", "Server Error, Please Try again later");
							responsestr = output.toString();
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
				JSONObject output = new JSONObject();
				output.put("retcode", "1 Error");
				output.put("answer", "Server Error, Please Try again later");
				responsestr = output.toString();
			}
		}
		return responsestr;
	}

	public String GetFundAccountByClientID(HttpServletRequest request, String ClientID) {
		String FundAccountNo = "";
		logger.info("Get GetFundAccountBalance ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/client/get?id=" + ClientID;
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				logger.info("Get GetFundAccountBalance ..11" + responsestr);
				if (responsestr.indexOf("0 Done") > 0) {
					// console console = new console(this);
					// console.log(ClientID);
					JSONObject jobj = new JSONObject(responsestr);
					String CommentConfigurationID = (new JSONObject(
							jobj.getJSONArray("answer").getJSONObject(0).getString("Comment"))).getString("cid");
					JSONObject output = new JSONObject();
					output.put("retcode", "0 Done");
					JSONObject answer = new JSONObject();
					answer.put("ClientID", ClientID);
					answer.put("FundAccountNo", FundAccountNo);
					answer.put("CommentConfigurationID", CommentConfigurationID);
					output.put("answer", answer);
					responsestr = output.toString();
					// console.log(output.toString());
				}
			} catch (Exception e) {
				e.printStackTrace();
				JSONObject output = new JSONObject();
				output.put("retcode", "1 Error");
				output.put("answer", "Server Error, Please Try again later");
				responsestr = output.toString();
			}
		}
		return responsestr;
	}

	public String GetFundAccountClientID(HttpServletRequest request ,String clientid) {
		String FundAccountNo = "";
		logger.info("Get GetFundAccountBalance ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/user/get?login=" + clientid;
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					JSONObject jobj = new JSONObject(responsestr);
					FundAccountNo = jobj.getJSONObject("answer").getString("Account");
					// console console = new console(this);
					// console.log(FundAccountNo);
					if (FundAccountNo == "" || FundAccountNo == null) {
						JSONObject output = new JSONObject();
						output.put("retcode", "1 Error");
						output.put("answer", "Fund Account Not Found, Please Contact Administrator.");
						responsestr = output.toString();
					} else if (httpUtils.sendAuth(this.serverinfo)) {
						path = "/api/user/get?login=" + FundAccountNo;
						try {
							responsestr = httpUtils.sendGet(this.serverinfo, path);
							if (responsestr.indexOf("0 Done") > 0) {
								logger.info("Get GetFundAccountBalance ..ewar" + responsestr);
								jobj = new JSONObject(responsestr);
								String ClientID = jobj.getJSONObject("answer").getString("ClientID");
								path = "/api/client/get?id=" + ClientID;
								try {
									responsestr = httpUtils.sendGet(this.serverinfo, path);
									logger.info("Get GetFundAccountBalance ..11" + responsestr);
									if (responsestr.indexOf("0 Done") > 0) {
										// console = new console(this);
										// console.log(ClientID);
										jobj = new JSONObject(responsestr);
										JSONArray answer1 = new JSONArray(jobj.getJSONArray("answer"));
										String Comment = answer1.getJSONObject(0).getString("Comment");
										String CommentConfigurationID = "";
										if (Comment.indexOf("cid") >= 0)
											CommentConfigurationID = (new JSONObject(Comment)).getString("cid");
										JSONObject output = new JSONObject();
										output.put("retcode", "0 Done");
										JSONObject answer = new JSONObject();
										answer.put("ClientID", ClientID);
										answer.put("FundAccountNo", FundAccountNo);
										answer.put("CommentConfigurationID", CommentConfigurationID);
										output.put("answer", answer);
										responsestr = output.toString();
										// console.log(output.toString());
									}
								} catch (Exception e) {
									e.printStackTrace();
									JSONObject output = new JSONObject();
									output.put("retcode", "1 Error");
									output.put("answer", "Server Error, Please Try again later");
									responsestr = output.toString();
								}
							}
						} catch (Exception e) {
							e.printStackTrace();
							JSONObject output = new JSONObject();
							output.put("retcode", "1 Error");
							output.put("answer", "Server Error, Please Try again later");
							responsestr = output.toString();
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
				JSONObject output = new JSONObject();
				output.put("retcode", "1 Error");
				output.put("answer", "Server Error, Please Try again later");
				responsestr = output.toString();
			}
		}
		return responsestr;
	}

	@RequestMapping(value = { "/GetFundAccountBalance" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView GetFundAccountBalance(HttpServletRequest request, Model model) {
		String FundAccountNo = "";
		logger.info("Get GetFundAccountBalance ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/user/get?login=" + (String) session.getAttribute("s_Login");
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					JSONObject jobj = new JSONObject(responsestr);
					FundAccountNo = jobj.getJSONObject("answer").getString("Account");
					// console console = new console(this);
					// console.log(FundAccountNo);
					if (FundAccountNo == "" || FundAccountNo == null) {
						JSONObject output = new JSONObject();
						output.put("retcode", "1 Error");
						output.put("answer", "Fund Account Not Found, Please Contact Administrator.");
						responsestr = output.toString();
					} else if (httpUtils.sendAuth(this.serverinfo)) {
						path = "/api/user/get?login=" + FundAccountNo;
						try {
							responsestr = httpUtils.sendGet(this.serverinfo, path);
							if (responsestr.indexOf("0 Done") > 0) {
								jobj = new JSONObject(responsestr);
								String Balance = jobj.getJSONObject("answer").getString("Balance");
								// console = new console(this);
								// console.log(Balance);
								JSONObject output = new JSONObject();
								output.put("retcode", "0 Done");
								JSONObject answer = new JSONObject();
								answer.put("Balance", Balance);
								answer.put("FundAccountNo", FundAccountNo);
								output.put("answer", answer);
								responsestr = output.toString();
								// console.log(output.toString());
							}
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/GetTargetAccountBalance" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView GetTargetAccountBalance(HttpServletRequest request, Model model) {
		logger.info("Get GetTargetAccountBalance ........" + this.serverinfo);
		String id = request.getParameter("id");
		ModelAndView mav = new ModelAndView("jsonView");
		HttpSession session = request.getSession();
		String responsestr = "";
		if (id != null && id != "") {
			if (checkAccountAndGroupMatch(request, (String) session.getAttribute("s_Login"), id)) {
				responsestr = GetAccountBalance(request, id);
			} else {
				JSONObject output = new JSONObject();
				output.put("retcode", "1 ERROR");
				output.put("answer", "Alert: please input trading account that under your managed group.");
				responsestr = output.toString();
			}
		} else {
			JSONObject output = new JSONObject();
			output.put("retcode", "1 ERROR");
			output.put("answer", "Invalid ID");
			responsestr = output.toString();
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/ConfirmCreateAccount" }, consumes = { "application/json" }, produces = {
			"application/json" })
	public ModelAndView ConfirmCreateAccount(@RequestBody String body, HttpServletRequest request) throws SQLException {
		logger.info("Get ConfirmCreateAccount ........" + this.serverinfo);
		JSONObject jsonbodyobj = new JSONObject(body);
		HttpSession session = request.getSession();
		String id = (String) session.getAttribute("s_Login");
		String name = jsonbodyobj.getString("Name");
		String group = jsonbodyobj.getString("Group");
		String MasterPassword = jsonbodyobj.getString("MasterPassword");
		String ReadOnlyPassword = jsonbodyobj.getString("ReadOnlyPassword");
		String Agent = (String) session.getAttribute("s_Login");
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		String newAccountInfomationjson = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (id != null && id != "" && name != null && name != "" && MasterPassword != null && MasterPassword != ""
				&& ReadOnlyPassword != null && ReadOnlyPassword != "")
			if (httpUtils.sendAuth(this.serverinfo))
				try {
					String path = "/api/user/get?login=" + id;
					responsestr = httpUtils.sendGet(this.serverinfo, path);
					if (responsestr.indexOf("0 Done") > 0) {
						path = "/api/user/add?";
						JSONObject fundmanagerdetails = new JSONObject(responsestr);
						String passmain = MasterPassword;
						String passinvestor = ReadOnlyPassword;
						path = String.valueOf(path) + "name=" + name;
						path = String.valueOf(path) + "&group=" + group;
						String leverage = fundmanagerdetails.getJSONObject("answer").getString("Leverage");
						path = String.valueOf(path) + "&leverage=" + leverage;
						String email = fundmanagerdetails.getJSONObject("answer").getString("Email");
						String Company = fundmanagerdetails.getJSONObject("answer").getString("Company");
						String Phone = fundmanagerdetails.getJSONObject("answer").getString("Phone");
						String Country = fundmanagerdetails.getJSONObject("answer").getString("Country");
						String City = fundmanagerdetails.getJSONObject("answer").getString("City");
						String ZIPCode = fundmanagerdetails.getJSONObject("answer").getString("ZipCode");
						String Address = fundmanagerdetails.getJSONObject("answer").getString("Address");
						if (httpUtils.sendAuth(this.serverinfo)) {
							JSONObject password = new JSONObject();
							password.put("PassMain", MasterPassword);
							password.put("PassInvestor", ReadOnlyPassword);
							password.put("Agent", Agent);
							password.put("Comment", "created in Fund manager by " + id);
							password.put("Company", Company);
							password.put("Phone", Phone);
							password.put("Country", Country);
							password.put("City", City);
							password.put("ZIPCode", ZIPCode);
							password.put("Address", Address);
							password.put("Email", email);
							logger.info("trading account url" + path);
							try {
								responsestr = httpUtils.sendPost(this.serverinfo, path, password.toString());
								logger.info(responsestr);
								if (responsestr.indexOf("0 Done") > 0) {
									JSONObject jobject = new JSONObject(responsestr);
									JSONObject janswer = jobject.getJSONObject("answer");
									String TradingAccLogin = janswer.getString("Login");
									newAccountInfomationjson = responsestr;
									logger.info("CLIENTID AND ACCOUNT LOGIN : " + id + ":" + TradingAccLogin
											+ ", password" + passmain);
									if (email != null && email != "" && email.indexOf(".com") >= 0) {
										logger.info("mailtest1 service rrwr@naver.com.......");
										try {
											String sendemail = "accounts@unionmks.com";
											String sendname = "UnionMK Account Registration";
											String recevieemail = email;
											String sedemailpw = "dbsldhs!23";
											logger.info("mailtest2................. ");
											JavaMailSenderImpl sender = new JavaMailSenderImpl();
											sender.setHost("mail.unionmks.com");
											sender.setPort(369);
											sender.setUsername(sendemail);
											sender.setPassword(sedemailpw);
											logger.info("mailtest3................. ");
											Properties prop = new Properties();
											prop.setProperty("mail.smtp.auth", "true");
											prop.setProperty("mail.smtp.starttls.enable", "true");
											logger.info("mailtest4................. ");
											sender.setJavaMailProperties(prop);
											MimeMessage message = sender.createMimeMessage();
											MimeMessageHelper helper = new MimeMessageHelper(message);
											helper.setTo(recevieemail);
											helper.setFrom(sendemail, sendname);
											helper.setSubject("Your Account have been approved");
											String body1 = MailTemplate.getAccountCreate("1",
													Long.valueOf(Long.parseLong(TradingAccLogin)), passmain,
													passinvestor, "www.googlwe.com", "1");
											helper.setText(body1, true);
											sender.send(message);
											logger.info("mailtest5................. ");
										} catch (Exception e) {
											e.printStackTrace();
										}
									}
									JSONObject newAccountInfomationjsonobj = new JSONObject(newAccountInfomationjson);
									JSONObject answer = newAccountInfomationjsonobj.getJSONObject("answer");
									answer.put("Login ID", TradingAccLogin);
									answer.put("Main Password", passmain);
									answer.put("Investor Password", passinvestor);
									newAccountInfomationjsonobj.remove("answer");
									newAccountInfomationjsonobj.put("answer", answer);
									responsestr = newAccountInfomationjsonobj.toString();
								}
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/ConfirmEditAccount" }, consumes = { "application/json" }, produces = {
			"application/json" })
	public ModelAndView ConfirmEditAccount(@RequestBody String body, HttpServletRequest request) throws SQLException {
		logger.info("Get ConfirmEditAccount ........" + this.serverinfo);
		JSONObject jsonbodyobj = new JSONObject(body);
		HttpSession session = request.getSession();
		String id = (String) session.getAttribute("s_Login");
		String name = jsonbodyobj.getString("Name");
		String group = jsonbodyobj.getString("Group");
		String AccountNumber = jsonbodyobj.getString("login");
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		String newAccountInfomationjson = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (id != null && id != "" && name != null && name != "")
			if (httpUtils.sendAuth(this.serverinfo))
				try {
					String path = "/api/user/get?login=" + id;
					responsestr = httpUtils.sendGet(this.serverinfo, path);
					if (responsestr.indexOf("0 Done") > 0) {
						path = "/api/user/update?";
						JSONObject fundmanagerdetails = new JSONObject(responsestr);
						path = String.valueOf(path) + "login=" + AccountNumber;
						path = String.valueOf(path) + "&name=" + name;
						path = String.valueOf(path) + "&group=" + group;
						String leverage = fundmanagerdetails.getJSONObject("answer").getString("Leverage");
						String email = fundmanagerdetails.getJSONObject("answer").getString("Email");
						path = String.valueOf(path) + "&leverage=" + leverage;
						if (httpUtils.sendAuth(this.serverinfo)) {
							JSONObject password = new JSONObject();
							logger.info(password.toString());
							logger.info("trading account url" + path);
							try {
								responsestr = httpUtils.sendPost(this.serverinfo, path, password.toString());
								logger.info(responsestr);
								if (responsestr.indexOf("0 Done") > 0) {
									JSONObject jobject = new JSONObject(responsestr);
									JSONObject janswer = jobject.getJSONObject("answer");
									String TradingAccLogin = janswer.getString("Login");
									newAccountInfomationjson = responsestr;
									logger.info("CLIENTID AND ACCOUNT LOGIN : " + id + ":" + TradingAccLogin);
									JSONObject newAccountInfomationjsonobj = new JSONObject(newAccountInfomationjson);
									JSONObject answer = newAccountInfomationjsonobj.getJSONObject("answer");
									answer.put("Login ID", TradingAccLogin);
									newAccountInfomationjsonobj.remove("answer");
									newAccountInfomationjsonobj.put("answer", answer);
									responsestr = newAccountInfomationjsonobj.toString();
								}
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/ConfirmDepositAccount" }, consumes = { "application/json" }, produces = {
			"application/json" })
	public ModelAndView ConfirmDepositAccount(@RequestBody String body, HttpServletRequest request)
			throws SQLException {
		logger.info("Get ConfirmCreateAccount ........" + this.serverinfo);
		JSONObject jsonbodyobj = new JSONObject(body);
		HttpSession session = request.getSession();
		String id = (String) session.getAttribute("s_Login");
		String depositAccount = jsonbodyobj.getString("login");
		String depositAmount = jsonbodyobj.getString("money");
		ModelAndView mav = new ModelAndView("jsonView");
		// console console = new console(this);
		String responsestr = "";
		float initialFundManagerAccountBalance = 0.0F;
		float initialTargetAccountBalance = 0.0F;
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		// console.log(String.valueOf(id) + depositAccount + depositAmount);
		if (APIProtectionHandler.IsLogin(request).booleanValue())
			if (id != null && id != "" && depositAccount != null && depositAccount != "" && depositAmount != null
					&& depositAmount != "") {
				if (checkAccountAndGroupMatch(request, id, depositAccount)) {
					// console.log("match");
					JSONObject balanceobj = new JSONObject(GetFundAccountBalance(request));
					if (balanceobj.getString("retcode").indexOf("0 Done") >= 0) {
						float FundManagerAccountBalance = Float
								.valueOf(balanceobj.getJSONObject("answer").getString("Balance")).floatValue();
						initialFundManagerAccountBalance = FundManagerAccountBalance;
						float depositAmountinFloat = Float.valueOf(depositAmount).floatValue();
						String FundAccountNumber = balanceobj.getJSONObject("answer").getString("FundAccountNo");
						JSONObject jobjaccountbalance = new JSONObject(GetAccountBalance(request, depositAccount));
						if (jobjaccountbalance.getString("retcode").indexOf("0 Done") >= 0) {
							initialTargetAccountBalance = Float
									.valueOf(jobjaccountbalance.getJSONObject("answer").getString("Balance"))
									.floatValue();
							if (depositAmountinFloat <= FundManagerAccountBalance) {
								// console.log("proceed to deposit , fund account initial : " +
								// initialFundManagerAccountBalance + "target account initial: " +
								// initialTargetAccountBalance + "total to deposit" + depositAmountinFloat);
								String comment = String.valueOf(id) + "D" + FundAccountNumber + "T" + depositAccount;
								if (httpUtils.sendAuth(this.serverinfo)) {
									String path = "/api/trade/balance?login=" + FundAccountNumber + "&type=2&balance=-"
											+ depositAmount + "&comment=" + comment;
									try {
										responsestr = httpUtils.sendGet(this.serverinfo, path);
										if (responsestr.indexOf("0 Done") > 0) {
											if (httpUtils.sendAuth(this.serverinfo)) {
												path = "/api/trade/balance?login=" + depositAccount + "&type=2&balance="
														+ depositAmount + "&comment=" + comment;
												try {
													responsestr = httpUtils.sendGet(this.serverinfo, path);
													if (responsestr.indexOf("0 Done") > 0) {
														JSONObject output = new JSONObject();
														output.put("retcode", "0 Done");
														output.put("answer",
																"Success Deposit to Account: " + depositAccount);
														responsestr = output.toString();
													} else {
														JSONObject output = new JSONObject();
														output.put("retcode", "1 ERROR");
														output.put("answer",
																"Unable to Proceed, please contact admins");
														responsestr = output.toString();
													}
												} catch (Exception e) {
													e.printStackTrace();
													JSONObject output = new JSONObject();
													output.put("retcode", "1 Error");
													output.put("answer", "Server Error, Please Try again later");
													responsestr = output.toString();
												}
											}
										} else {
											JSONObject output = new JSONObject();
											output.put("retcode", "1 ERROR");
											output.put("answer", "Unable to Proceed, please contact admins");
											responsestr = output.toString();
										}
									} catch (Exception e) {
										e.printStackTrace();
										JSONObject output = new JSONObject();
										output.put("retcode", "1 Error");
										output.put("answer", "Server Error, Please Try again later");
										responsestr = output.toString();
									}
								}
							} else {
								JSONObject output = new JSONObject();
								output.put("retcode", "1 ERROR");
								output.put("answer",
										"Insufficient balance in your Fund Account, please deposit into Fund Account first.");
								responsestr = output.toString();
							}
						} else {
							JSONObject output = new JSONObject();
							output.put("retcode", "1 ERROR");
							output.put("answer", "cant get target account balance, please contact admins");
							responsestr = output.toString();
						}
					} else {
						responsestr = balanceobj.toString();
					}
				} else {
					JSONObject output = new JSONObject();
					output.put("retcode", "1 ERROR");
					output.put("answer",
							"We Detect Your managed Group do not match with the Trading account group, please review the trading account number.");
					responsestr = output.toString();
				}
			} else {
				JSONObject output = new JSONObject();
				output.put("retcode", "1 ERROR");
				output.put("answer", "Invalid Data, Please make sure all the data input is correct and try again");
				responsestr = output.toString();
			}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/ConfirmWithdrawalAccount" }, consumes = { "application/json" }, produces = {
			"application/json" })
	public ModelAndView ConfirmWithdrawalAccount(@RequestBody String body, HttpServletRequest request)
			throws SQLException {
		logger.info("Get ConfirmWithdrawalAccount ........" + this.serverinfo);
		JSONObject jsonbodyobj = new JSONObject(body);
		HttpSession session = request.getSession();
		String id = (String) session.getAttribute("s_Login");
		String withdrawalAccount = jsonbodyobj.getString("login");
		String withdrawalAmount = jsonbodyobj.getString("money");
		ModelAndView mav = new ModelAndView("jsonView");
		// console console = new console(this);
		String responsestr = "";
		float initialFundManagerAccountBalance = 0.0F;
		float initialTargetAccountBalance = 0.0F;
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		// console.log(String.valueOf(id) + withdrawalAccount + withdrawalAmount);
		if (APIProtectionHandler.IsLogin(request).booleanValue())
			if (id != null && id != "" && withdrawalAccount != null && withdrawalAccount != ""
					&& withdrawalAmount != null && withdrawalAmount != "") {
				if (checkAccountAndGroupMatch(request, id, withdrawalAccount)) {
					// console.log("match");
					JSONObject balanceobj = new JSONObject(GetFundAccountBalance(request));
					if (balanceobj.getString("retcode").indexOf("0 Done") >= 0) {
						float FundManagerAccountBalance = Float
								.valueOf(balanceobj.getJSONObject("answer").getString("Balance")).floatValue();
						initialFundManagerAccountBalance = FundManagerAccountBalance;
						float withdrawalAmountinFloat = Float.valueOf(withdrawalAmount).floatValue();
						String FundAccountNumber = balanceobj.getJSONObject("answer").getString("FundAccountNo");
						JSONObject jobjaccountbalance = new JSONObject(GetAccountBalance(request, withdrawalAccount));
						if (jobjaccountbalance.getString("retcode").indexOf("0 Done") >= 0) {
							initialTargetAccountBalance = Float
									.valueOf(jobjaccountbalance.getJSONObject("answer").getString("Balance"))
									.floatValue();
							if (withdrawalAmountinFloat <= initialTargetAccountBalance) {
								// console.log("proceed to withdrawal , fund account initial : " +
								// initialFundManagerAccountBalance + "target account initial: " +
								// initialTargetAccountBalance + "total to withdrawal" +
								// withdrawalAmountinFloat);
								String comment = String.valueOf(id) + "W" + withdrawalAccount + "T" + FundAccountNumber;
								if (httpUtils.sendAuth(this.serverinfo)) {
									String path = "/api/trade/balance?login=" + withdrawalAccount + "&type=2&balance=-"
											+ withdrawalAmount + "&comment=" + comment;
									try {
										responsestr = httpUtils.sendGet(this.serverinfo, path);
										if (responsestr.indexOf("0 Done") > 0) {
											if (httpUtils.sendAuth(this.serverinfo)) {
												path = "/api/trade/balance?login=" + FundAccountNumber
														+ "&type=2&balance=" + withdrawalAmount + "&comment=" + comment;
												try {
													responsestr = httpUtils.sendGet(this.serverinfo, path);
													if (responsestr.indexOf("0 Done") > 0) {
														JSONObject output = new JSONObject();
														output.put("retcode", "0 Done");
														output.put("answer", "Success Withdrawal " + withdrawalAmount
																+ " USD From Account: " + withdrawalAccount);
														responsestr = output.toString();
													} else {
														JSONObject output = new JSONObject();
														output.put("retcode", "1 ERROR");
														output.put("answer",
																"Unable to Proceed, please contact admins");
														responsestr = output.toString();
													}
												} catch (Exception e) {
													e.printStackTrace();
													JSONObject output = new JSONObject();
													output.put("retcode", "1 Error");
													output.put("answer", "Server Error, Please Try again later");
													responsestr = output.toString();
												}
											}
										} else {
											JSONObject output = new JSONObject();
											output.put("retcode", "1 ERROR");
											output.put("answer", "Unable to Proceed, please contact admins");
											responsestr = output.toString();
										}
									} catch (Exception e) {
										e.printStackTrace();
										JSONObject output = new JSONObject();
										output.put("retcode", "1 Error");
										output.put("answer", "Server Error, Please Try again later");
										responsestr = output.toString();
									}
								}
							} else {
								JSONObject output = new JSONObject();
								output.put("retcode", "1 ERROR");
								output.put("answer", "Insufficient balance in account " + withdrawalAccount);
								responsestr = output.toString();
							}
						} else {
							JSONObject output = new JSONObject();
							output.put("retcode", "1 ERROR");
							output.put("answer", "cant get target account balance, please contact admins");
							responsestr = output.toString();
						}
					} else {
						responsestr = balanceobj.toString();
					}
				} else {
					JSONObject output = new JSONObject();
					output.put("retcode", "1 ERROR");
					output.put("answer",
							"We Detect Your managed Group do not match with the Trading account group, please review the trading account number.");
					responsestr = output.toString();
				}
			} else {
				JSONObject output = new JSONObject();
				output.put("retcode", "1 ERROR");
				output.put("answer", "Invalid Data, Please make sure all the data input is correct and try again");
				responsestr = output.toString();
			}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/ConfirmTransferBalance" }, consumes = { "application/json" }, produces = {
			"application/json" })
	public ModelAndView ConfirmTransferBalance(@RequestBody String body, HttpServletRequest request)
			throws SQLException {
		logger.info("Get ConfirmTransferBalance ........" + this.serverinfo);
		JSONObject jsonbodyobj = new JSONObject(body);
		HttpSession session = request.getSession();
		String id = (String) session.getAttribute("s_Login");
		String withdrawalAccount = jsonbodyobj.getString("fromlogin");
		String DepositAccount = jsonbodyobj.getString("tologin");
		String transferAmount = jsonbodyobj.getString("money");
		ModelAndView mav = new ModelAndView("jsonView");
		// console console = new console(this);
		String responsestr = "";
		float initialFundManagerAccountBalance = 0.0F;
		float initialTargetAccountBalance = 0.0F;
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		// console.log(String.valueOf(id) + withdrawalAccount + transferAmount);
		if (APIProtectionHandler.IsLogin(request).booleanValue())
			if (id != null && id != "" && withdrawalAccount != null && withdrawalAccount != "" && transferAmount != null
					&& transferAmount != "" && DepositAccount != null && DepositAccount != "") {
				if (checkAccountAndGroupMatch(request, id, withdrawalAccount)) {
					// console.log("match withdrawalAccount");
					if (checkAccountAndGroupMatch(request, id, DepositAccount)) {
						// console.log("match DepositAccount");
						float transferAmountinFloat = Float.valueOf(transferAmount).floatValue();
						JSONObject jobjaccountbalance = new JSONObject(GetAccountBalance(request, withdrawalAccount));
						if (jobjaccountbalance.getString("retcode").indexOf("0 Done") >= 0) {
							initialTargetAccountBalance = Float
									.valueOf(jobjaccountbalance.getJSONObject("answer").getString("Balance"))
									.floatValue();
							if (transferAmountinFloat < initialTargetAccountBalance) {
								// console.log("proceed to withdrawal , fund account initial : " +
								// initialFundManagerAccountBalance + "target account initial: " +
								// initialTargetAccountBalance + "total to withdrawal" + transferAmountinFloat);
								String comment = String.valueOf(id) + "T" + withdrawalAccount + "T" + DepositAccount;
								if (httpUtils.sendAuth(this.serverinfo)) {
									String path = "/api/trade/balance?login=" + withdrawalAccount + "&type=2&balance=-"
											+ transferAmount + "&comment=" + comment;
									try {
										responsestr = httpUtils.sendGet(this.serverinfo, path);
										if (responsestr.indexOf("0 Done") > 0) {
											if (httpUtils.sendAuth(this.serverinfo)) {
												path = "/api/trade/balance?login=" + DepositAccount + "&type=2&balance="
														+ transferAmount + "&comment=" + comment;
												try {
													responsestr = httpUtils.sendGet(this.serverinfo, path);
													if (responsestr.indexOf("0 Done") > 0) {
														JSONObject output = new JSONObject();
														output.put("retcode", "0 Done");
														output.put("answer",
																"Success Transfer " + transferAmount
																		+ " USD From Account: " + withdrawalAccount
																		+ " To Account: " + DepositAccount);
														responsestr = output.toString();
													} else {
														JSONObject output = new JSONObject();
														output.put("retcode", "1 ERROR");
														output.put("answer",
																"Unable to Proceed, please contact admins");
														responsestr = output.toString();
													}
												} catch (Exception e) {
													e.printStackTrace();
													JSONObject output = new JSONObject();
													output.put("retcode", "1 Error");
													output.put("answer", "Server Error, Please Try again later");
													responsestr = output.toString();
												}
											}
										} else {
											JSONObject output = new JSONObject();
											output.put("retcode", "1 ERROR");
											output.put("answer", "Unable to Proceed, please contact admins");
											responsestr = output.toString();
										}
									} catch (Exception e) {
										e.printStackTrace();
										JSONObject output = new JSONObject();
										output.put("retcode", "1 Error");
										output.put("answer", "Server Error, Please Try again later");
										responsestr = output.toString();
									}
								}
							} else {
								JSONObject output = new JSONObject();
								output.put("retcode", "1 ERROR");
								output.put("answer", "Insufficient balance in account " + withdrawalAccount);
								responsestr = output.toString();
							}
						} else {
							JSONObject output = new JSONObject();
							output.put("retcode", "1 ERROR");
							output.put("answer", "cant get target account balance, please contact admins");
							responsestr = output.toString();
						}
					} else {
						JSONObject output = new JSONObject();
						output.put("retcode", "1 ERROR");
						output.put("answer",
								"We Detect Your managed Group do not match with the Trading account group, please review the trading account number.");
						responsestr = output.toString();
					}
				} else {
					JSONObject output = new JSONObject();
					output.put("retcode", "1 ERROR");
					output.put("answer",
							"We Detect Your managed Group do not match with the Trading account group, please review the trading account number.");
					responsestr = output.toString();
				}
			} else {
				JSONObject output = new JSONObject();
				output.put("retcode", "1 ERROR");
				output.put("answer", "Invalid Data, Please make sure all the data input is correct and try again");
				responsestr = output.toString();
			}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	public boolean checkAccountAndGroupMatch(HttpServletRequest request, String managerID, String AccountNumber) {
		boolean ismatch = false;
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		String responsestr = "";
		HttpSession session = request.getSession();
		String userGroup = "";
		// console console = new console(this);
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/user/group?login=" + AccountNumber;
			try {
				responsestr = httpUtils.sendGet(path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("Get CheckAccountAndGroup info" + responsestr);
					JSONObject obj = new JSONObject(responsestr);
					String group = obj.getJSONObject("answer").getString("group");
					userGroup = group;
					// console.log(group.toString());
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/manager/get?login=" + managerID;
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("API RESULT" + responsestr);
					JSONObject jstring = new JSONObject(responsestr);
					String retcode = jstring.getString("retcode");
					JSONArray answer_array = jstring.getJSONArray("answer");
					JSONObject managerObj = answer_array.getJSONObject(0);
					JSONArray managerManagedGroup = managerObj.getJSONArray("Groups");
					JSONObject outputjson = new JSONObject();
					outputjson.put("retcode", "0 Done");
					JSONArray grouparray = new JSONArray();
					if (managerManagedGroup != null && managerManagedGroup.length() > 0)
						for (int i = 0; i < managerManagedGroup.length(); i++) {
							String group = managerManagedGroup.getJSONObject(i).getString("Group");
							logger.info("group " + i + ": " + group);
							if (group.equals(userGroup))
								ismatch = true;
						}
					// console.log(userGroup);
					outputjson.put("answer", grouparray);
					responsestr = outputjson.toString();
					logger.info("finaloutput : " + responsestr);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return ismatch;
	}

	@RequestMapping(value = { "/accountList" }, method = { RequestMethod.GET })
	public String accountList(Model model) {
		logger.info("Welcome home! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/accountList";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/Positions" }, method = { RequestMethod.GET })
	public String Positions(Model model) {
		logger.info("Welcome home! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/position";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/getAccountList" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView getAccountList(@RequestParam("ClientID") String ClientID, HttpServletRequest request,
			Model model) {
		logger.info("Welcome Trading AccountListByClientID! ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		String responsestr1 = "";
		String retcode = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/client/user/get_logins?client=" + ClientID;
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					JSONObject jSongetLogin = new JSONObject(responsestr);
					retcode = jSongetLogin.getString("retcode");
					JSONObject login_obj = jSongetLogin.getJSONObject("answer");
					String loginstr = "";
					if (login_obj != null) {
						JSONArray jsonLogin = login_obj.getJSONArray(ClientID);
						if (jsonLogin != null && jsonLogin.length() > 0) {
							for (int i = 0; i < jsonLogin.length(); i++)
								loginstr = String.valueOf(loginstr) + "," + (StringUtils.isEmpty(jsonLogin.get(i)) ? ""
										: String.valueOf(jsonLogin.get(i)));
							logger.info("loginstr=" + loginstr.substring(1, loginstr.length()));
						}
						loginstr = loginstr.substring(1, loginstr.length());
					}
					try {
						path = "/api/user/get_batch?login=" + loginstr;
						responsestr = httpUtils.sendGet(this.serverinfo, path);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@PostMapping(value = { "/ConfirmChangePassword" }, consumes = { "application/json" }, produces = {
			"application/json" })
	public ModelAndView ConfirmChangePassword(@RequestBody String body, HttpServletRequest request)
			throws SQLException {
		logger.info("Welcome Trading AccountListByClientID! ........" + this.serverinfo);
		JSONObject jsonbodyobj = new JSONObject(body);
		String type = jsonbodyobj.getString("type");
		String password = jsonbodyobj.getString("p");
		String id = jsonbodyobj.getString("id");
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		if (type != null && type != "" && password != null && password != "" && password.length() > 7) {
			String intype = "";
			if (type.equals("m"))
				intype = "main";
			if (type.equals("i"))
				intype = "investor";
			if (APIProtectionHandler.IsLogin(request).booleanValue() && httpUtils.sendAuth(this.serverinfo)) {
				String path = "/api/user/change_password?login=" + id + "&type=" + intype + "&password=" + password;
				try {
					responsestr = httpUtils.sendGet(this.serverinfo, path);
					logger.info(responsestr);
					responsestr.indexOf("0 Done");
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		} else {
			JSONObject output = new JSONObject();
			output.put("retcode", "1 Error");
			output.put("answer",
					"Password not meet requirement, Minimum password length is 8 character with lowercase,uppercase,at least one number and one special character");
			responsestr = output.toString();
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/login" }, method = { RequestMethod.GET })
	public String login(Model model) throws SQLException {
		logger.info("Welcome home! Login.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
	
		returnURL = "/login";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/loginConfirm" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView loginConfirm(HttpServletRequest request, @RequestParam("login") String login,
			@RequestParam("password") String password, Model model) {
		
		ModelAndView mav = new ModelAndView("jsonView");
		HttpSession session = request.getSession();
		String responsestr="";
		logger.info("Welcome mt5 api login by account" + this.serverinfo);
						if( login.equals("Admin") && password.equals("tryn.123567"))
						{
							
									session.setAttribute("s_Login", String.valueOf(login));
									session.setAttribute("s_Name", String.valueOf(login));
									session.setAttribute("s_Group", login);
									
									responsestr = "SUCCESS";
									logger.info(responsestr);
								} else {
									responsestr = "Invalid Credentials.";
								}
							
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/newpage" }, method = { RequestMethod.GET })
	public String newpage(Model model) {
		logger.info("Welcome home! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/newpage";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/testimageupload" }, method = { RequestMethod.GET })
	public String testimageupload(Model model) {
		logger.info("Welcome home! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/testimageupload";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/editProfile" }, method = { RequestMethod.GET })
	public String editProfile(Model model) {
		logger.info("Welcome editprofile.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/editProfile";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/legalDocuments" }, method = { RequestMethod.GET })
	public String legalDocuments(Model model) {
		logger.info("Welcome legalDocuments.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/legalDocuments";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/changeLeverage" }, method = { RequestMethod.GET })
	public String changeLeverage(Model model) {
		logger.info("Welcome changeLeverage.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/changeLeverage";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/changePassword" }, method = { RequestMethod.GET })
	public String changePassword(Model model) {
		logger.info("Welcome changePassword.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/changePassword";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/addAccount" }, method = { RequestMethod.GET })
	public String addAccount(Model model) {
		logger.info("Welcome addAccount.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/addAccount";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/tradingAnalytic" }, method = { RequestMethod.GET })
	public String tradingAnalytic(Model model) {
		logger.info("Welcome tradingAnalytic.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/tradingAnalytic";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/fundHistoryAll" }, method = { RequestMethod.GET })
	public String fundHistoryAll(Model model) {
		logger.info("Welcome fundHistoryAll.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/fundHistoryAll";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/DownloadMT5" }, method = { RequestMethod.GET })
	public String DownloadMT5(Model model) {
		logger.info("Welcome DownloadMT5.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/DownloadMT5";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/markets" }, method = { RequestMethod.GET })
	public String markets(Model model) {
		logger.info("Welcome home! Help markets.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		boolean isAuthIgnore = false;
		List<LastTransinfo> list = MTWebAPI.lastTrans("MT5A", "EURUSD,AUDUSD,USDCAD", "0", isAuthIgnore);
		model.addAttribute("list", list);
		logger.info("vLocal==" + vLocal);
		returnURL = "/markets";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/symbolTest" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView symbolTest(@RequestParam("ClientID") String ClientID, Model model) {
		logger.info("Welcome Trading AccountListByClientID! ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		String responsestr1 = "";
		String retcode = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/tick/last?symbol=EURUSD,AUDUSD,USDCAD&trans_id=0";
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", responsestr);
		return mav;
	}

	@RequestMapping(value = { "/logout" }, method = { RequestMethod.GET })
	public String logout(HttpServletRequest request, Model model) {
		logger.info("Welcome logout.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		HttpSession session = request.getSession(false);
		if (session != null)
			session.invalidate();
		return String.valueOf(defaultpath) + "/login";
	}

	@RequestMapping(value = { "/signup" }, method = { RequestMethod.GET })
	public String signup(HttpServletRequest request, Model model) {
		logger.info("Welcome signup.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		HttpSession session = request.getSession(false);
		if (session != null)
			session.invalidate();
		return String.valueOf(defaultpath) + "/signup";
	}

	private String getFileExtension(String filename) {
		String name = filename;
		int lastIndexOf = name.lastIndexOf(".");
		if (lastIndexOf == -1)
			return "";
		return name.substring(lastIndexOf);
	}

	@PostMapping({ "/pimageupload" })
	public ResponseEntity<?> handleFileUpload(@RequestParam("file") MultipartFile file, HttpServletRequest request)
			throws SQLException {
		boolean retfail = false;
		if (APIProtectionHandler.IsLogin(request).booleanValue()) {
			String fileLocation = new File("portal\\swap\\Userimg") + "\\";
			String fileextension = getFileExtension(file.getOriginalFilename());
			HttpSession session = request.getSession();
			String username = (String) session.getAttribute("s_Login");
			String fileName = String.valueOf(fileLocation) + "p_" + username + fileextension;
			String path = fileLocation;
			File pathAsFile = new File(path);
			if (!Files.exists(Paths.get(path, new String[0]), new java.nio.file.LinkOption[0]))
				pathAsFile.mkdir();
			try {
				Files.deleteIfExists(Paths.get(fileName, new String[0]));
				file.transferTo(new File(fileName));
			} catch (Exception e) {
				retfail = true;
			}
			JSONObject inputjson = new JSONObject();
			inputjson.put("p_name", "p_user_add_profile_photo");
			inputjson.put("user_id", session.getAttribute("s_Login"));
			inputjson.put("photo_name", "p_" + username + fileextension);
			logger.info(inputjson.toString());
			String responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
			if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
				logger.info(responsestr);
				JSONObject JOBJ = new JSONObject(responsestr);
				String retcode = JOBJ.getString("retcode");
				if (retcode.indexOf("0 Done") < 0)
					retfail = true;
			} else {
				retfail = true;
			}
		}
		if (retfail)
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		return ResponseEntity.ok("File uploaded successfully.");
	}

	@RequestMapping(value = { "/test" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView test(HttpServletRequest paramHttpServletRequest, Model paramModel) {
		throw new Error(
				"Unresolved compilation problem: \n\tThe method ApiProtection(HttpServletRequest, String, Boolean) in the type APIProtectionHandler is not applicable for the arguments (HttpServletRequest, String)\n");
	}

	@RequestMapping(value = { "/getProfileImgUrl" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView getProfileImgUrl(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "";
		logger.info("Welcome getProfileImgUrl: ");
		ModelAndView mav = new ModelAndView("jsonView");
		HttpSession session = request.getSession();
		if (APIProtectionHandler.IsLogin(request).booleanValue()) {
			JSONObject inputjson = new JSONObject();
			inputjson.put("p_name", "p_user_get_profile_photo");
			inputjson.put("user_id", session.getAttribute("s_Login"));
			logger.info(inputjson.toString());
			responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
			if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
				logger.info(responsestr);
				JSONObject JOBJ = new JSONObject(responsestr);
				String retcode = JOBJ.getString("retcode");
				if (retcode.indexOf("0 Done") >= 0) {
					JSONObject answer = JOBJ.getJSONObject("answer");
					if (answer != null)
						logger.info(responsestr);
				}
			} else {
				logger.info(responsestr);
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/getViewProfileImgUrl" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView getViewProfileImgUrl(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "";
		String id = request.getParameter("id");
		logger.info("Welcome getViewProfileImgUrl: ");
		ModelAndView mav = new ModelAndView("jsonView");
		HttpSession session = request.getSession();
		if (APIProtectionHandler.IsLogin(request).booleanValue()) {
			JSONObject inputjson = new JSONObject();
			inputjson.put("p_name", "p_user_get_profile_photo");
			inputjson.put("user_id", id);
			logger.info(inputjson.toString());
			responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
			if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
				logger.info(responsestr);
				JSONObject JOBJ = new JSONObject(responsestr);
				String retcode = JOBJ.getString("retcode");
				if (retcode.indexOf("0 Done") >= 0) {
					JSONObject answer = JOBJ.getJSONObject("answer");
					if (answer != null)
						logger.info(responsestr);
				}
			} else {
				logger.info(responsestr);
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/deleteProfileImg" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView deleteProfileImg(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "";
		logger.info("Welcome getProfileImgUrl: ");
		ModelAndView mav = new ModelAndView("jsonView");
		HttpSession session = request.getSession();
		if (APIProtectionHandler.IsLogin(request).booleanValue()) {
			JSONObject inputjson = new JSONObject();
			inputjson.put("p_name", "p_user_add_profile_photo");
			inputjson.put("user_id", session.getAttribute("s_Login"));
			inputjson.put("photo_name", "p_default.jpg");
			logger.info(inputjson.toString());
			responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
			if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
				logger.info(responsestr);
				JSONObject JOBJ = new JSONObject(responsestr);
				String retcode = JOBJ.getString("retcode");
				if (retcode.indexOf("0 Done") >= 0) {
					JSONObject answer = JOBJ.getJSONObject("answer");
					if (answer != null)
						logger.info(responsestr);
				}
			} else {
				logger.info(responsestr);
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/positionGetByComment" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView positionGetByComment(HttpServletRequest request, Model model) {
		logger.info("Get PositionGetPage ........" + this.serverinfo);
		String mid = request.getParameter("mid");
		logger.info("Get para ........" + mid);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		if (httpUtils.sendAuth(this.serverinfo)) {
			HttpSession session = request.getSession();
			String path = "/api/position/get_page?login=" + (String) session.getAttribute("s_Login")
					+ "&offset=0&total=100";
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					logger.info("API RESULT" + responsestr);
					JSONObject outputobject = new JSONObject(responsestr);
					for (int i = 0, len = outputobject.getJSONArray("answer").length(); i < len; i++) {
						JSONObject obj = outputobject.getJSONArray("answer").getJSONObject(i);
						String comment = obj.getString("Comment");
						String indexofstring = "MAM:" + mid.toString() + ":";
						logger.info("comment" + obj.getString("Comment") + "index:" + i);
						obj.remove("ApiData");
						obj.remove("Action");
						obj.remove("ActivationTime");
						obj.remove("ExternalID");
						obj.remove("Digits");
						obj.remove("ActivationPrice");
						obj.remove("RateMargin");
						obj.remove("Reason");
						obj.remove("VolumeExt");
						obj.remove("TimeUpdate");
						obj.remove("ActivationFlags");
						obj.remove("ActivationMode");
						obj.remove("TimeCreate");
						obj.remove("TimeCreateMsc");
						obj.remove("ExpertID");
						obj.remove("ContractSize");
						obj.remove("Login");
						obj.remove("ExpertPositionID");
						obj.remove("DigitsCurrency");
						obj.remove("Storage");
						obj.remove("RateProfit");
						obj.remove("ModifyFlags");
						obj.remove("PriceCurrent");
						obj.remove("Dealer");
						obj.remove("TimeUpdateMsc");
						if (comment.indexOf(indexofstring) < 0) {
							obj.remove("Symbol");
							obj.remove("PriceTP");
							obj.remove("Profit");
							obj.remove("Comment");
							obj.remove("Position");
							obj.remove("PriceOpen");
							obj.remove("PriceSL");
							obj.remove("Volume");
						}
					}
					responsestr = outputobject.toString();
					logger.info("API RESULT AFTER PROCESS" + responsestr);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/getRating" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView getRating(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "";
		String masterid = request.getParameter("mid");
		logger.info("Welcome getRating: ");
		ModelAndView mav = new ModelAndView("jsonView");
		HttpSession session = request.getSession();
		if (APIProtectionHandler.IsLogin(request).booleanValue()) {
			JSONObject inputjson = new JSONObject();
			inputjson.put("p_name", "p_master_get_rating");
			inputjson.put("masterid", masterid);
			logger.info(inputjson.toString());
			responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
			if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
				logger.info(responsestr);
				JSONObject JOBJ = new JSONObject(responsestr);
				String retcode = JOBJ.getString("retcode");
				if (retcode.indexOf("0 Done") >= 0) {
					JSONObject answer = JOBJ.getJSONObject("answer");
					if (answer != null)
						logger.info(responsestr);
				}
			} else {
				logger.info(responsestr);
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/uploadFile" }, method = { RequestMethod.POST })
	public ModelAndView uploadFileHandler(@RequestParam("name") String name, @RequestParam("file") MultipartFile file,
			HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView(String.valueOf(defaultpath) + "/myprofile");
		if (file.isEmpty()) {
			modelAndView.addObject("message", String.format("You failed to upload [%s] because the file because %s",
					new Object[] { name, "file is empty" }));
		} else {
			createPizzaImagesDirIfNeeded();
			modelAndView.addObject("message", createImage(name, file, request));
		}
		return modelAndView;
	}

	private void createPizzaImagesDirIfNeeded() {
		if (!PIZZA_IMAGES_DIR.exists())
			PIZZA_IMAGES_DIR.mkdirs();
	}

	private String createImage(String name, MultipartFile file, HttpServletRequest request) {
		try {
			HttpSession session = request.getSession();
			String fileextension = getFileExtension(name);
			File image = new File(String.valueOf(PIZZA_IMAGES_DIR_ABSOLUTE_PATH) + "p_"
					+ (String) session.getAttribute("s_Login") + fileextension);
			BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(image));
			stream.write(file.getBytes());
			stream.close();
			JSONObject inputjson = new JSONObject();
			inputjson.put("p_name", "p_user_add_profile_photo");
			inputjson.put("user_id", session.getAttribute("s_Login"));
			inputjson.put("photo_name", "p_" + (String) session.getAttribute("s_Login") + fileextension);
			logger.info(inputjson.toString());
			String responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
			if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
				logger.info(responsestr);
				JSONObject JOBJ = new JSONObject(responsestr);
				String retcode = JOBJ.getString("retcode");
				retcode.indexOf("0 Done");
			}
			return String.format("You successfully uploaded file = [%s]", new Object[] { name });
		} catch (Exception e) {
			return String.format("You failed to upload [%s] because the file because %s",
					new Object[] { name, e.getMessage() });
		}
	}

	@RequestMapping({ "/image/{imageName}.{extension}" })
	@ResponseBody
	public byte[] getImage(@PathVariable("imageName") String imageName, @PathVariable("extension") String ext)
			throws IOException {
		createPizzaImagesDirIfNeeded();
		File serverFile = new File(String.valueOf(PIZZA_IMAGES_DIR_ABSOLUTE_PATH) + imageName + "." + ext);
		return Files.readAllBytes(serverFile.toPath());
	}

	@RequestMapping(value = { "/testuploadimage" }, method = { RequestMethod.GET })
	public String testuploadimage(Model model) {
		logger.info("Welcome testuploadimage.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/testuploadfile";
		return String.valueOf(defaultpath) + returnURL;
	}

	@PostMapping(value = { "/posttest" }, consumes = { "application/json" }, produces = { "application/json" })
	public ModelAndView updatePerson(@RequestBody String body, HttpServletRequest request) throws SQLException {
		String responsestr = body;
		logger.info("Welcome getRating: ");
		ModelAndView mav = new ModelAndView("jsonView");
		mav.addObject("result", responsestr);
		return mav;
	}

	@RequestMapping(value = { "/testmail" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	public ModelAndView testmail(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "hello";
		logger.info("Welcome getRating: ");
		ModelAndView mav = new ModelAndView("jsonView");
		logger.info("mailtest1 service rrwr@naver.com.......");
		try {
			String sendemail = "accounts@unionmks.com";
			String sendname = "UnionMK Account Registration";
			String recevieemail = "mingfung93@gmail.com";
			String sedemailpw = "dbsldhs!23";
			logger.info("mailtest2................. ");
			JavaMailSenderImpl sender = new JavaMailSenderImpl();
			sender.setHost("mail.unionmks.com");
			sender.setPort(369);
			sender.setUsername(sendemail);
			sender.setPassword(sedemailpw);
			logger.info("mailtest3................. ");
			Properties prop = new Properties();
			prop.setProperty("mail.smtp.auth", "true");
			prop.setProperty("mail.smtp.starttls.enable", "true");
			logger.info("mailtest4................. ");
			sender.setJavaMailProperties(prop);
			MimeMessage message = sender.createMimeMessage();
			MimeMessageHelper helper = new MimeMessageHelper(message);
			helper.setTo(recevieemail);
			helper.setFrom(sendemail, sendname);
			helper.setSubject("Your Account have been approved");
			String body = MailTemplate.getAccountCreate("1", Long.valueOf(123425678L), "1234sfffdfg23", "sdftwerh324",
					"www.googlwe.com", "1");
			helper.setText(body, true);
			sender.send(message);
			logger.info("mailtest5................. ");
		} catch (Exception e) {
			e.printStackTrace();
		}
		mav.addObject("result", responsestr);
		return mav;
	}

	@RequestMapping(value = { "/pushNotification" }, method = { RequestMethod.GET })
	public String pushNotification(Model model) {
		logger.info("Welcome pushnotification! Index.");
		String vLocal = LocaleContextHolder.getLocale().getLanguage();
		model.addAttribute("lang", vLocal);
		String returnURL = "";
		returnURL = "/pushnotification";
		return String.valueOf(defaultpath) + returnURL;
	}

	@RequestMapping(value = { "/sendpushNotification" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView sendpushNotification(HttpServletRequest request, Model model) throws SQLException {
		String responsestr = "";
		String responsestr1 = "";
		String clientid = request.getParameter("uid");
		String title = request.getParameter("t");
		String body = request.getParameter("body");
		String redirecturl = request.getParameter("u");
		ModelAndView mav = new ModelAndView("jsonView");
		HttpSession session = request.getSession();
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		logger.info("Welcome pushNotification: ");
		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "";
			try {
				path = "/api/user/get?login=" + clientid;
				responsestr1 = httpUtils.sendGet(this.serverinfo, path);
				logger.info(responsestr1);
				if (responsestr1.indexOf("0 Done") > 0) {
					if (APIProtectionHandler.IsLogin(request).booleanValue()) {
						JSONObject inputjson = new JSONObject();
						inputjson.put("p_name", "p_admin_send_notification");
						inputjson.put("client_id", clientid);
						inputjson.put("redirect_url", redirecturl);
						inputjson.put("title", title);
						inputjson.put("body", body);
						inputjson.put("autorizedadmin", session.getAttribute("s_Login"));
						inputjson.put("adminsessionid", "test");
						logger.info(inputjson.toString());
						responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
						if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
							logger.info(responsestr);
							JSONObject JOBJ = new JSONObject(responsestr);
							String retcode = JOBJ.getString("retcode");
							if (retcode.indexOf("0 Done") >= 0) {
								JSONObject answer = JOBJ.getJSONObject("answer");
								if (answer != null)
									logger.info(responsestr);
							}
						} else {
							logger.info(responsestr);
						}
					}
				} else {
					responsestr = responsestr1;
				}
			} catch (Exception e) {
				responsestr = "Error." + e;
			}
		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(true)));
		return mav;
	}

	@RequestMapping(value = { "/ajax/m2payDepositRequest" }, method = { RequestMethod.POST }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView m2payDepositRequest(M2PayDepositRequest depositRequest, Model model,
			HttpServletRequest request) {
		logger.info("/ajax/m2payDepositRequestThe M2PayDepositRequest info : " + depositRequest);
		String result = "SUCCESS";
		String resultmessage = "SUCCESS";
		String resulturl = "";
		ModelAndView mav = new ModelAndView("jsonView");
		int inscnt = -1;
		HttpSession session = request.getSession();
		String clientid = (String) session.getAttribute("s_Login");
		long unixTime = Instant.now().getEpochSecond();
		String callbackUrl = "https://www.greymanager.com" + request.getContextPath() + "/m2papi/depositcollback/"
				+ clientid;
		depositRequest.setUserinfoseq(Long.valueOf(Long.parseLong(clientid)));
		depositRequest.setClientid(Long.valueOf(Long.parseLong(clientid)));
		depositRequest.setTimestamp(String.valueOf(unixTime));
		depositRequest.setCallbackurl(callbackUrl);
		depositRequest.setCreuser(clientid);
		depositRequest.setUpduser(clientid);
		try {
			depositRequest = HttpUtils.getM2PayDepositRequest(depositRequest);
			if (depositRequest != null && depositRequest.getResult() != null
					&& !depositRequest.getResult().equals("ERROR") && depositRequest.getAddress() != null
					&& depositRequest.getAddress().trim().length() > 0 && depositRequest.getPaymentid() != null
					&& depositRequest.getPaymentid().trim().length() > 0) {
				JSONObject inputjson = new JSONObject();
				inputjson.put("p_name", "p_insert_M2PayDepositRequest");
				inputjson.put("userinfoseq", depositRequest.getUserinfoseq());
				inputjson.put("amount", depositRequest.getAmount());
				inputjson.put("currency", depositRequest.getCurrency());
				inputjson.put("paymentcurrency", depositRequest.getPaymentcurrency());
				inputjson.put("callbackurl", depositRequest.getCallbackurl());
				inputjson.put("paymentid", depositRequest.getPaymentid());
				inputjson.put("statuss", depositRequest.getStatus());
				inputjson.put("transactionamount", depositRequest.getTransactionamount());
				inputjson.put("netamount", 2);
				inputjson.put("transactioncurrency", depositRequest.getTransactioncurrency());
				inputjson.put("finalcurrency", depositRequest.getFinalcurrency());
				inputjson.put("processingfee", depositRequest.getProcessingfee());
				inputjson.put("checkouturl", depositRequest.getCheckouturl());
				inputjson.put("address", depositRequest.getAddress());
				inputjson.put("creuser", depositRequest.getCreuser());
				logger.info(inputjson.toString());
				String DbReturnresult = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
				if (MariaDBProcedureHandler.isJSONValid(DbReturnresult)) {
					JSONObject returnobj = new JSONObject(DbReturnresult);
					String retcode = returnobj.getString("retcode");
					if (retcode.indexOf("0 Done") >= 0)
						inscnt = 1;
				}
				if (inscnt > 0) {
					resulturl = (depositRequest.getCheckouturl() == null) ? "" : depositRequest.getCheckouturl();
					result = "SUCCESS";
					resultmessage = "SUCCESS";
				} else {
					result = "ERROR";
					resultmessage = "ERROR-DBNOTINSERT";
				}
			} else {
				result = "ERROR";
				resultmessage = (depositRequest.getResultmessage() != null
						&& depositRequest.getResultmessage().trim().length() > 1) ? depositRequest.getResultmessage()
								: "ERROR-Match2Pay";
			}
		} catch (Exception e) {
			result = "ERROR";
			resultmessage = "ERROR-" + e.toString();
			e.printStackTrace();
		}
		mav.addObject("result", result);
		mav.addObject("resultmessage", resultmessage);
		mav.addObject("resulturl", resulturl);
		logger.info("[" + result + "] " + resultmessage);
		logger.info("return cnt" + inscnt);
		return mav;
	}

	@RequestMapping(value = { "/insertmaster" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView insertmaster(HttpServletRequest request, Model model) {
		logger.info("Get insertmaster ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		String id = request.getParameter("id");

		if (id != null && id != "") {

			String index = request.getParameter("index");

			HttpUtils httpUtils = new HttpUtils(this.serverinfo);
			HttpSession session = request.getSession();
			JSONObject inputjson = new JSONObject();
			inputjson.put("p_name", "p_insert_master_manager");

			inputjson.put("managerid", id);

			logger.info(inputjson.toString());
			try {
				responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();

				JSONObject json = new JSONObject();
				json.put("retcode", "1 Error");
				JSONObject answer = new JSONObject();
				answer.put("desc", "system error");
				json.put("answer", answer);

				responsestr = json.toString();

			}
			if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
				logger.info(responsestr);
				JSONObject JOBJ = new JSONObject(responsestr);
				String retcode = JOBJ.getString("retcode");
				if (retcode.indexOf("0 Done") >= 0) {
					JSONObject answer = JOBJ.getJSONObject("answer");
					if (answer != null) {
						// String description = answer.getString("desc");
						// String url = answer.getString("url");
						// logger.info(description +", " + url);

						logger.info(responsestr);
					}

				}
			} else {

				logger.info(responsestr);
			}

		} else {
			JSONObject inputjson = new JSONObject();
			inputjson.put("retcode", "1 Error");
			JSONObject answer = new JSONObject();
			answer.put("desc", "invalid master id");
			// inputjson.put("answer", "invalid master id");

			inputjson.put("answer", answer);
			responsestr = inputjson.toString();

		}
		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(false)));
		return mav;
	}

	@RequestMapping(value = { "/getmastermanager" }, method = { RequestMethod.GET }, produces = {
			"application/json;charset=UTF-8" })
	@ResponseBody
	public ModelAndView getmastermanager(HttpServletRequest request, Model model) {
		logger.info("Get getmastermanager ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";

		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		JSONObject inputjson = new JSONObject();
		inputjson.put("p_name", "p_get_master_manager_list");
		logger.info(inputjson.toString());
		try {
			responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

			JSONObject json = new JSONObject();
			json.put("retcode", "1 Error");
			JSONObject answer = new JSONObject();
			answer.put("desc", "system error");
			json.put("answer", answer);

			responsestr = json.toString();

		}
		if (MariaDBProcedureHandler.isJSONValid(responsestr)) {
			logger.info(responsestr);
			JSONObject JOBJ = new JSONObject(responsestr);
			String retcode = JOBJ.getString("retcode");
			if (retcode.indexOf("0 Done") >= 0) {
				JSONObject answer = JOBJ.getJSONObject("answer");
				if (answer != null) {
					// String description = answer.getString("desc");
					// String url = answer.getString("url");
					// logger.info(description +", " + url);

					logger.info(responsestr);
				}

			}
		} else {

			logger.info(responsestr);
		}

		mav.addObject("result", APIProtectionHandler.ApiProtection(request, responsestr, Boolean.valueOf(false)));
		return mav;
	}

	@RequestMapping(value = "/schedule/updateallmasterrate", method = RequestMethod.GET, produces = "application/json;charset=UTF-8")
	
	@ResponseBody
	public ModelAndView updateallmasterrate(HttpServletRequest request, Model model) {
		logger.info("Get getmastermanager ........" + this.serverinfo);
		ModelAndView mav = new ModelAndView("jsonView");
		String responsestr = "";
		String key = request.getParameter("key");
		if( key.indexOf("77365D8686912BFBE927EC9579715")>=0)
		{
			
		
	
		JSONArray totaloutputarray = new JSONArray();

		HttpUtils httpUtils = new HttpUtils(this.serverinfo);
		HttpSession session = request.getSession();
		JSONObject inputjson = new JSONObject();
		inputjson.put("p_name", "p_get_master_manager_list");
		logger.info(inputjson.toString());
		try {
			responsestr = MariaDBProcedureHandler.ProcedureCall(inputjson.toString());
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			

			JSONObject json = new JSONObject();
			json.put("retcode", "1 Error");
			JSONObject answer = new JSONObject();
			answer.put("desc", e.getMessage());
			json.put("answer", answer);

			responsestr = json.toString();

		}

		logger.info(responsestr);
		JSONObject JOBJ = new JSONObject(responsestr);
		String retcode = JOBJ.getString("retcode");
		if (retcode.indexOf("0 Done") >= 0) {
			JSONObject answer = JOBJ.getJSONObject("answer");
			if (answer != null) {
				JSONArray dataarray = answer.getJSONArray("data");
				int length = dataarray.length();
				logger.info("length" + length);
				if (length > 0) {
					for (int x = 0; x < length; x++) {
						String Managerid = dataarray.getJSONObject(x).getString("Manager");

						if (httpUtils.sendAuth(serverinfo)) {
							String path = "/api/user/get?login=" + Managerid;

							try {

								responsestr = httpUtils.sendGet(serverinfo, path);
								if (responsestr.indexOf("0 Done") > 0) {

									JSONObject json = new JSONObject(responsestr);
									answer = json.getJSONObject("answer");
									// String Company = answer.getString("Company");
									String str = answer.getString("Address");

									//logger.info("string here..." + str);

									String[] strArray = str.split(",");

									String[] login = new String[strArray.length];
									String[] name = new String[strArray.length];
									String[] startdate = new String[strArray.length];
									String[] profit = new String[strArray.length];
									String[] rate = new String[strArray.length];
									String[] group = new String[strArray.length];
									String[] follower = new String[strArray.length];

									for (int i = 0; i < strArray.length; i++) {
										String s = strArray[i];

										// Extract the number before the comma
										int commaIndex = s.indexOf("(");
										String number = s.substring(0, commaIndex);

										// Extract the string inside the parentheses
										int openParenIndex = s.indexOf("(");
										int closeParenIndex = s.indexOf(")");
										String stringInsideParen = s.substring(openParenIndex + 1, closeParenIndex);
										login[i] = number;
										group[i] = stringInsideParen;

									}

									String logins = "";

									for (int i = 0; i < login.length; i++) {
										logins = logins + login[i] + ",";
									}

									String constructedurl = "/api/user/get_batch?login=" + logins;
									logger.info(constructedurl);

									try {

										responsestr = httpUtils.sendGet(serverinfo, constructedurl);
										if (responsestr.indexOf("0 Done") > 0) {

											JSONObject batch = new JSONObject(responsestr);
											JSONArray answerarray = batch.getJSONArray("answer");
											for (int i = 0; i < answerarray.length(); i++) {
												name[i] = answerarray.getJSONObject(i).getString("Name");
												startdate[i] = answerarray.getJSONObject(i).getString("Registration");
												profit[i] = answerarray.getJSONObject(i).getString("Balance");
												rate[i] = answerarray.getJSONObject(i).getString("Balance");
												rate[i] = answerarray.getJSONObject(i).getString("Balance");
												path = "/api/user/logins?group=" + group[i];
												try {
													responsestr = httpUtils.sendGet(serverinfo, path);
												//	logger.info(responsestr);
													if (responsestr.indexOf("0 Done") > 0) {

														JSONObject groupcountjobj = new JSONObject(responsestr);
														JSONArray answerarray1 = groupcountjobj.getJSONArray("answer");
														int arraylength = answerarray1.length();

														follower[i] = String.valueOf(arraylength);

													}
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
													JSONObject jsonw = new JSONObject();
													jsonw.put("retcode", "1 Error");
													JSONObject answerw = new JSONObject();
													answer.put("desc", e.getMessage());
													jsonw.put("answer", answerw);

													responsestr = jsonw.toString();
												}

											}

											JSONArray elementanswerarray = new JSONArray();

											for (int i = 0; i < login.length; i++) {
												JSONObject element = new JSONObject();
												element.put("login", login[i]);
												element.put("name", name[i]);
												element.put("start date", startdate[i]);
												element.put("group", group[i]);
												element.put("follower", follower[i]);

												elementanswerarray.put(element);
												

												String rspt = rate(login[i]);

												if (rspt.indexOf("0 Done") >= 0) {
													JSONObject jb = new JSONObject(rspt);
													String outputrate = jb.getString("rate");
													String outputprofit = jb.getString("profit");
													element.put("profit", outputprofit);
													element.put("rate", outputrate);

													String url = "/api/user/get?login=" + login[i];
													try {
														String responsestr1 = httpUtils.sendGet(serverinfo, url);
														//logger.info(responsestr1);
														if (responsestr1.indexOf("0 Done") > 0) {
															JSONObject userobj = new JSONObject(responsestr1);
															JSONObject answerobj = userobj.getJSONObject("answer");
															String Company = answerobj.getString("Company");
															JSONObject detailobj = new JSONObject(Company);
															String managerid = detailobj.getString("manager_id");
															element.put("manager_id", managerid);

															detailobj.remove("rate");
															detailobj.remove("profit");
															detailobj.put("rate", outputrate);
															detailobj.put("profit", outputprofit);
													//		logger.info(detailobj.toString());

															url = "/api/user/update?login=" + login[i] + "&company="
																	+ detailobj.toString();
															logger.info(url);
															try {
																String responsestr2 = httpUtils.sendGet(serverinfo,
																		url);
														//		logger.info(responsestr2);
																if (responsestr2.indexOf("0 Done") > 0) {

																	
																	
																	
																}

															} catch (Exception e) {
																// TODO Auto-generated catch block
																e.printStackTrace();
																JSONObject jsonw = new JSONObject();
																jsonw.put("retcode", "1 Error");
																JSONObject answerw = new JSONObject();
																answer.put("desc", e.getMessage());
																jsonw.put("answer", answerw);

																responsestr = jsonw.toString();
															}
														}
													} catch (Exception e) {
														// TODO Auto-generated catch block
														e.printStackTrace();
														JSONObject jsonw = new JSONObject();
														jsonw.put("retcode", "1 Error");
														JSONObject answerw = new JSONObject();
														answer.put("desc", e.getMessage());
														jsonw.put("answer", answerw);

														responsestr = jsonw.toString();
													}

												} else {
													element.put("profit", "-");
													element.put("rate", "-");
												}
												totaloutputarray.put(element);
											}

											JSONObject outputobj = new JSONObject();
											outputobj.put("retcode", "0 Done");
											outputobj.put("answer", totaloutputarray);
											responsestr = outputobj.toString();
										}
									} catch (Exception e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
										JSONObject jsonw = new JSONObject();
										jsonw.put("retcode", "1 Error");
										JSONObject answerw = new JSONObject();
										answer.put("desc", e.getMessage());
										jsonw.put("answer", answerw);

										responsestr = jsonw.toString();
									}

								}

							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
								JSONObject jsonw = new JSONObject();
								jsonw.put("retcode", "1 Error");
								JSONObject answerw = new JSONObject();
								answer.put("desc", e.getMessage());
								jsonw.put("answer", answerw);

								responsestr = jsonw.toString();
							}

						}

					}
				}

				logger.info(responsestr);
			}

		}
		}
		else
		{
			JSONObject jobj = new JSONObject();
			jobj.put("Error", "unautorized");
			responsestr = jobj.toString();
		}
		mav.addObject("result", responsestr);
		return mav;

	}

	public String rate(String id) {

		logger.info("function rate ........" + serverinfo);
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(serverinfo);
		if (httpUtils.sendAuth(serverinfo)) {
			long unixTime = Instant.now().getEpochSecond() + 3600000;
			String path = "/api/deal/get_batch?login=" + id + "&from=0&to=" + String.valueOf(unixTime);

			try {
				responsestr = httpUtils.sendGet(serverinfo, path);
				if (responsestr.indexOf("0 Done") > 0) {
					//logger.info("API RESULT" + responsestr);

					JSONObject jobj = new JSONObject(responsestr);
					JSONArray jarray = jobj.getJSONArray("answer");
					int length = jarray.length();
					double totalprofit = 0;
					double totaldeposit = 0;
					for (int i = 0; i < length; i++) {
						String action = jarray.getJSONObject(i).getString("Action");
						if (action.indexOf("0") >= 0 || action.indexOf("1") >= 0) {
							String profit = jarray.getJSONObject(i).getString("Profit");
							//logger.info(profit);
							totalprofit = totalprofit + Double.valueOf(profit);
						}

						if (action != "0" && action != "1") {
							String profit = jarray.getJSONObject(i).getString("Profit");
							//logger.info(profit);
							totaldeposit = totaldeposit + Double.valueOf(profit);
						}
					}

					double profitrate = totalprofit / totaldeposit * 100;
					logger.info("total: " + totalprofit + " " + totaldeposit + ",rate :"
							+ String.format("%.2f", profitrate));
					JSONObject output = new JSONObject();
					output.put("retcode", "0 Done");
					if (profitrate > 0) {
						output.put("rate", "+" + String.format("%.2f", profitrate) + "%");
					} else {
						output.put("rate", String.format("%.2f", profitrate) + "%");
					}

					output.put("profit", String.format("%.2f", totalprofit));
					responsestr = output.toString();
				}

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				JSONObject jsonw = new JSONObject();
				jsonw.put("retcode", "1 Error");
				JSONObject answerw = new JSONObject();
				answerw.put("desc", e.getMessage());
				jsonw.put("answer", answerw);

				responsestr = jsonw.toString();
			}
		}

		return responsestr;
	}

	
	public String getnamebylogin(String login)
	{
		String name = "";
		
		String responsestr = "";
		HttpUtils httpUtils = new HttpUtils(this.serverinfo);

		if (httpUtils.sendAuth(this.serverinfo)) {
			String path = "/api/user/get?login=" + login;
			try {
				responsestr = httpUtils.sendGet(this.serverinfo, path);
				
				if(responsestr.indexOf("0 Done")>=0)
				{
					JSONObject jobj = new JSONObject(responsestr);
					String namein = jobj.getJSONObject("answer").getString("Name");
					name = namein;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		return name;
		
	}
	fundAdminController() {
	}
}
